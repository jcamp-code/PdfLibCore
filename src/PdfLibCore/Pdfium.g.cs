 
using System;
using System.Runtime.InteropServices;
using System.Runtime.ExceptionServices;
using System.Security;
using PdfLibCore.Types;
using PdfLibCore.Enums;

/*
This file is part of PdfCoreLib, a wrapper around the PDFium library for the .NET.
Inspired by the awesome work of PDFiumSharp by Tobias Meyer.

Copyright (C) 2021 Jan Baarsssen
License: Microsoft Reciprocal License (MS-RL)
*/

// AUTOGENERATED FILE - 05-09-2022 (11:09:59)
// DO NOT MODIFY

namespace PdfLibCore
{
    public static partial class Pdfium
	{
        private static readonly object _lock = new object();

		#region FPDF_InitLibrary

		/// <include file="Pdfium.xml" path="Documentation/FPDF_InitLibrary/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDF_InitLibrary()
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDF_InitLibrary();
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_InitLibrary

		#region FPDF_InitLibraryWithConfig

		/// <include file="Pdfium.xml" path="Documentation/FPDF_InitLibraryWithConfig/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDF_InitLibraryWithConfig(ref FPDF_LIBRARY_CONFIG config)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDF_InitLibraryWithConfig(ref config);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_InitLibraryWithConfig

		#region FPDF_DestroyLibrary

		/// <include file="Pdfium.xml" path="Documentation/FPDF_DestroyLibrary/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDF_DestroyLibrary()
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDF_DestroyLibrary();
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_DestroyLibrary

		#region FPDF_SetSandBoxPolicy

		/// <include file="Pdfium.xml" path="Documentation/FPDF_SetSandBoxPolicy/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDF_SetSandBoxPolicy(int policy, bool enable)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDF_SetSandBoxPolicy(policy, enable);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_SetSandBoxPolicy

		#region FPDF_SetPrintTextWithGDI

		/// <include file="Pdfium.xml" path="Documentation/FPDF_SetPrintTextWithGDI/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDF_SetPrintTextWithGDI(bool use_gdi)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDF_SetPrintTextWithGDI(use_gdi);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_SetPrintTextWithGDI

		#region FPDF_SetPrintMode

		/// <include file="Pdfium.xml" path="Documentation/FPDF_SetPrintMode/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDF_SetPrintMode(int mode)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_SetPrintMode(mode);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_SetPrintMode

		#region FPDF_LoadDocument

		/// <include file="Pdfium.xml" path="Documentation/FPDF_LoadDocument/*" />
		/// <seealso cref='PdfDocument(string, string)'/>
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_DOCUMENT FPDF_LoadDocument([MarshalAs(UnmanagedType.LPStr)] string file_path, [MarshalAs(UnmanagedType.LPStr)] string password)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_LoadDocument(file_path, password);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_LoadDocument

		#region FPDF_LoadMemDocument

		/// <include file="Pdfium.xml" path="Documentation/FPDF_LoadMemDocument/*" />
		/// <seealso cref='PdfDocument(byte[], int, int, string)'/>
        [HandleProcessCorruptedStateExceptions]
		private static FPDF_DOCUMENT FPDF_LoadMemDocument(ref byte data_buf, int size, [MarshalAs(UnmanagedType.LPStr)] string password)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_LoadMemDocument(ref data_buf, size, password);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_LoadMemDocument

		#region FPDF_LoadCustomDocument

		/// <include file="Pdfium.xml" path="Documentation/FPDF_LoadCustomDocument/*" />
		/// <seealso cref='PdfDocument(System.IO.Stream, string)'/>
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_DOCUMENT FPDF_LoadCustomDocument(FPDF_FILEREAD fileRead, [MarshalAs(UnmanagedType.LPStr)] string password)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_LoadCustomDocument(fileRead, password);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_LoadCustomDocument

		#region FPDF_GetFileVersion

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetFileVersion/*" />
		/// <seealso cref='PdfDocument.FileVersion'/>
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDF_GetFileVersion(FPDF_DOCUMENT doc, out int fileVersion)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetFileVersion(doc, out fileVersion);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetFileVersion

		#region FPDF_GetLastError

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetLastError/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_ERR FPDF_GetLastError()
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetLastError();
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetLastError

		#region FPDF_DocumentHasValidCrossReferenceTable

		/// <include file="Pdfium.xml" path="Documentation/FPDF_DocumentHasValidCrossReferenceTable/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDF_DocumentHasValidCrossReferenceTable(FPDF_DOCUMENT document)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_DocumentHasValidCrossReferenceTable(document);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_DocumentHasValidCrossReferenceTable

		#region FPDF_GetTrailerEnds

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetTrailerEnds/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDF_GetTrailerEnds(FPDF_DOCUMENT document, byte[] buffer, int length)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetTrailerEnds(document, buffer, length);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetTrailerEnds

		#region FPDF_GetDocPermissions

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetDocPermissions/*" />
		/// <seealso cref='PdfDocument.Permissions'/>
        [HandleProcessCorruptedStateExceptions]
		public static DocumentPermissions FPDF_GetDocPermissions(FPDF_DOCUMENT document)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetDocPermissions(document);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetDocPermissions

		#region FPDF_GetSecurityHandlerRevision

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetSecurityHandlerRevision/*" />
		/// <seealso cref='PdfDocument.SecurityHandlerRevision'/>
        [HandleProcessCorruptedStateExceptions]
		public static int FPDF_GetSecurityHandlerRevision(FPDF_DOCUMENT document)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetSecurityHandlerRevision(document);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetSecurityHandlerRevision

		#region FPDF_GetPageCount

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageCount/*" />
		/// <seealso cref='PdfPageCollection.Count'/>
		/// <seealso cref='PdfDocument.Pages'/>
        [HandleProcessCorruptedStateExceptions]
		public static int FPDF_GetPageCount(FPDF_DOCUMENT document)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetPageCount(document);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetPageCount

		#region FPDF_LoadPage

		/// <include file="Pdfium.xml" path="Documentation/FPDF_LoadPage/*" />
		/// <seealso cref='PdfPageCollection'/>
		/// <seealso cref='PdfDocument.Pages'/>
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_PAGE FPDF_LoadPage(FPDF_DOCUMENT document, int page_index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_LoadPage(document, page_index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_LoadPage

		#region FPDF_GetPageWidthF

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageWidthF/*" />
        [HandleProcessCorruptedStateExceptions]
		public static float FPDF_GetPageWidthF(FPDF_PAGE page)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetPageWidthF(page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetPageWidthF

		#region FPDF_GetPageWidth

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageWidth/*" />
		/// <seealso cref='PdfPage.Width'/>
        [HandleProcessCorruptedStateExceptions]
		public static double FPDF_GetPageWidth(FPDF_PAGE page)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetPageWidth(page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetPageWidth

		#region FPDF_GetPageHeightF

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageHeightF/*" />
        [HandleProcessCorruptedStateExceptions]
		public static float FPDF_GetPageHeightF(FPDF_PAGE page)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetPageHeightF(page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetPageHeightF

		#region FPDF_GetPageHeight

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageHeight/*" />
		/// <seealso cref='PdfPage.Height'/>
        [HandleProcessCorruptedStateExceptions]
		public static double FPDF_GetPageHeight(FPDF_PAGE page)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetPageHeight(page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetPageHeight

		#region FPDF_GetPageBoundingBox

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageBoundingBox/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDF_GetPageBoundingBox(FPDF_PAGE page, FS_RECTF rect)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetPageBoundingBox(page, rect);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetPageBoundingBox

		#region FPDF_GetPageSizeByIndexF

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageSizeByIndexF/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDF_GetPageSizeByIndexF(FPDF_DOCUMENT document, int index, FS_SIZEF size)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetPageSizeByIndexF(document, index, size);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetPageSizeByIndexF

		#region FPDF_GetPageSizeByIndex

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageSizeByIndex/*" />
		/// <seealso cref='PdfPage.Size'/>
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDF_GetPageSizeByIndex(FPDF_DOCUMENT document, int index, out double width, out double height)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetPageSizeByIndex(document, index, out width, out height);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetPageSizeByIndex

		#region FPDF_RenderPageBitmap

		/// <include file="Pdfium.xml" path="Documentation/FPDF_RenderPageBitmap/*" />
		/// <seealso cref='PdfPage.Render(PdfLibCore.PdfiumBitmap,PdfLibCore.Enums.PageOrientations,PdfLibCore.Enums.RenderingFlags)'/>
        [HandleProcessCorruptedStateExceptions]
		public static void FPDF_RenderPageBitmap(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDF_RenderPageBitmap(bitmap, page, start_x, start_y, size_x, size_y, rotate, flags);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_RenderPageBitmap

		#region FPDF_RenderPage

		/// <include file="Pdfium.xml" path="Documentation/FPDF_RenderPage/*" />
		/// <seealso cref='PdfPage.Render(PdfLibCore.PdfiumBitmap,PdfLibCore.Enums.PageOrientations,PdfLibCore.Enums.RenderingFlags)'/>
        [HandleProcessCorruptedStateExceptions]
		public static void FPDF_RenderPage(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDF_RenderPage(bitmap, page, start_x, start_y, size_x, size_y, rotate, flags);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_RenderPage

		#region FPDF_RenderPageBitmapWithMatrix

		/// <include file="Pdfium.xml" path="Documentation/FPDF_RenderPageBitmapWithMatrix/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDF_RenderPageBitmapWithMatrix(FPDF_BITMAP bitmap, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipping, RenderingFlags flags)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDF_RenderPageBitmapWithMatrix(bitmap, page, matrix, clipping, flags);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_RenderPageBitmapWithMatrix

		#region FPDF_RenderPageSkp

		/// <include file="Pdfium.xml" path="Documentation/FPDF_RenderPageSkp/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_RECORDER FPDF_RenderPageSkp(FPDF_PAGE page, int size_x, int size_y)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_RenderPageSkp(page, size_x, size_y);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_RenderPageSkp

		#region FPDF_ClosePage

		/// <include file="Pdfium.xml" path="Documentation/FPDF_ClosePage/*" />
		/// <seealso cref='PdfDocument.Close'/>
        [HandleProcessCorruptedStateExceptions]
		public static void FPDF_ClosePage(FPDF_PAGE page)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDF_ClosePage(page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_ClosePage

		#region FPDF_CloseDocument

		/// <include file="Pdfium.xml" path="Documentation/FPDF_CloseDocument/*" />
		/// <seealso cref='PdfDocument.Close'/>
        [HandleProcessCorruptedStateExceptions]
		public static void FPDF_CloseDocument(FPDF_DOCUMENT document)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDF_CloseDocument(document);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_CloseDocument

		#region FPDF_DeviceToPage

		/// <include file="Pdfium.xml" path="Documentation/FPDF_DeviceToPage/*" />
		/// <seealso cref='PdfPage.DeviceToPage'/>
        [HandleProcessCorruptedStateExceptions]
		public static void FPDF_DeviceToPage(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, int device_x, int device_y, out double page_x, out double page_y)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDF_DeviceToPage(page, start_x, start_y, size_x, size_y, rotate, device_x, device_y, out page_x, out page_y);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_DeviceToPage

		#region FPDF_PageToDevice

		/// <include file="Pdfium.xml" path="Documentation/FPDF_PageToDevice/*" />
		/// <seealso cref='PdfPage.PageToDevice'/>
        [HandleProcessCorruptedStateExceptions]
		public static void FPDF_PageToDevice(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, double page_x, double page_y, out int device_x, out int device_y)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDF_PageToDevice(page, start_x, start_y, size_x, size_y, rotate, page_x, page_y, out device_x, out device_y);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_PageToDevice

		#region FPDFBitmap_Create

		/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_Create/*" />
		/// <seealso cref='PdfiumBitmap(int, int, bool)'/>
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_BITMAP FPDFBitmap_Create(int width, int height, bool hasAlpha)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFBitmap_Create(width, height, hasAlpha);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFBitmap_Create

		#region FPDFBitmap_CreateEx

		/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_CreateEx/*" />
		/// <seealso cref='PdfiumBitmap(int, int, BitmapFormats, IntPtr, int)'/>
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_BITMAP FPDFBitmap_CreateEx(int width, int height, BitmapFormats format, IntPtr first_scan, int stride)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFBitmap_CreateEx(width, height, format, first_scan, stride);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFBitmap_CreateEx

		#region FPDFBitmap_GetFormat

		/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_GetFormat/*" />
        [HandleProcessCorruptedStateExceptions]
		public static BitmapFormats FPDFBitmap_GetFormat(FPDF_BITMAP bitmap)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFBitmap_GetFormat(bitmap);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFBitmap_GetFormat

		#region FPDFBitmap_FillRect

		/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_FillRect/*" />
		/// <seealso cref='PdfiumBitmap.FillRectangle(int, int, int, int, FPDF_COLOR)'/>
		/// <seealso cref='PdfiumBitmap.Fill(FPDF_COLOR)'/>
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFBitmap_FillRect(FPDF_BITMAP bitmap, int left, int top, int width, int height, FPDF_COLOR color)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFBitmap_FillRect(bitmap, left, top, width, height, color);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFBitmap_FillRect

		#region FPDFBitmap_GetBuffer

		/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_GetBuffer/*" />
		/// <seealso cref='PdfiumBitmap.Scan0'/>
        [HandleProcessCorruptedStateExceptions]
		public static IntPtr FPDFBitmap_GetBuffer(FPDF_BITMAP bitmap)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFBitmap_GetBuffer(bitmap);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFBitmap_GetBuffer

		#region FPDFBitmap_GetWidth

		/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_GetWidth/*" />
		/// <seealso cref='PdfiumBitmap.Width'/>
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFBitmap_GetWidth(FPDF_BITMAP bitmap)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFBitmap_GetWidth(bitmap);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFBitmap_GetWidth

		#region FPDFBitmap_GetHeight

		/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_GetHeight/*" />
		/// <seealso cref='PdfiumBitmap.Height'/>
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFBitmap_GetHeight(FPDF_BITMAP bitmap)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFBitmap_GetHeight(bitmap);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFBitmap_GetHeight

		#region FPDFBitmap_GetStride

		/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_GetStride/*" />
		/// <seealso cref='PdfiumBitmap.Stride'/>
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFBitmap_GetStride(FPDF_BITMAP bitmap)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFBitmap_GetStride(bitmap);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFBitmap_GetStride

		#region FPDFBitmap_Destroy

		/// <include file="Pdfium.xml" path="Documentation/FPDFBitmap_Destroy/*" />
		/// <seealso cref='PdfiumBitmap.Dispose()'/>
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFBitmap_Destroy(FPDF_BITMAP bitmap)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFBitmap_Destroy(bitmap);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFBitmap_Destroy

		#region FPDF_VIEWERREF_GetPrintScaling

		/// <include file="Pdfium.xml" path="Documentation/FPDF_VIEWERREF_GetPrintScaling/*" />
		/// <seealso cref='PdfDocument.PrintPrefersScaling'/>
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDF_VIEWERREF_GetPrintScaling(FPDF_DOCUMENT document)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_VIEWERREF_GetPrintScaling(document);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_VIEWERREF_GetPrintScaling

		#region FPDF_VIEWERREF_GetNumCopies

		/// <include file="Pdfium.xml" path="Documentation/FPDF_VIEWERREF_GetNumCopies/*" />
		/// <seealso cref='PdfDocument.PrintCopyCount'/>
        [HandleProcessCorruptedStateExceptions]
		public static int FPDF_VIEWERREF_GetNumCopies(FPDF_DOCUMENT document)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_VIEWERREF_GetNumCopies(document);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_VIEWERREF_GetNumCopies

		#region FPDF_VIEWERREF_GetPrintPageRange

		/// <include file="Pdfium.xml" path="Documentation/FPDF_VIEWERREF_GetPrintPageRange/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_PAGERANGE FPDF_VIEWERREF_GetPrintPageRange(FPDF_DOCUMENT document)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_VIEWERREF_GetPrintPageRange(document);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_VIEWERREF_GetPrintPageRange

		#region FPDF_VIEWERREF_GetPrintPageRangeCount

		/// <include file="Pdfium.xml" path="Documentation/FPDF_VIEWERREF_GetPrintPageRangeCount/*" />
        [HandleProcessCorruptedStateExceptions]
		public static uint FPDF_VIEWERREF_GetPrintPageRangeCount(FPDF_PAGERANGE pagerange)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_VIEWERREF_GetPrintPageRangeCount(pagerange);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_VIEWERREF_GetPrintPageRangeCount

		#region FPDF_VIEWERREF_GetPrintPageRangeElement

		/// <include file="Pdfium.xml" path="Documentation/FPDF_VIEWERREF_GetPrintPageRangeElement/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDF_VIEWERREF_GetPrintPageRangeElement(FPDF_PAGERANGE pagerange, uint index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_VIEWERREF_GetPrintPageRangeElement(pagerange, index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_VIEWERREF_GetPrintPageRangeElement

		#region FPDF_VIEWERREF_GetDuplex

		/// <include file="Pdfium.xml" path="Documentation/FPDF_VIEWERREF_GetDuplex/*" />
		/// <seealso cref='PdfDocument.DuplexType'/>
        [HandleProcessCorruptedStateExceptions]
		public static DuplexTypes FPDF_VIEWERREF_GetDuplex(FPDF_DOCUMENT document)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_VIEWERREF_GetDuplex(document);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_VIEWERREF_GetDuplex

		#region FPDF_VIEWERREF_GetName

		/// <include file="Pdfium.xml" path="Documentation/FPDF_VIEWERREF_GetName/*" />
        [HandleProcessCorruptedStateExceptions]
		private static uint FPDF_VIEWERREF_GetName(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, uint length)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_VIEWERREF_GetName(document, key, ref buffer, length);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_VIEWERREF_GetName

		#region FPDF_CountNamedDests

		/// <include file="Pdfium.xml" path="Documentation/FPDF_CountNamedDests/*" />
		/// <seealso cref='PdfDestinationCollection.Count'/>
		/// <seealso cref='PdfDocument.Destinations'/>
        [HandleProcessCorruptedStateExceptions]
		public static int FPDF_CountNamedDests(FPDF_DOCUMENT document)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_CountNamedDests(document);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_CountNamedDests

		#region FPDF_GetNamedDestByName

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetNamedDestByName/*" />
		/// <seealso cref='PdfDestinationCollection'/>
		/// <seealso cref='PdfDocument.Destinations'/>
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_DEST FPDF_GetNamedDestByName(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string name)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetNamedDestByName(document, name);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetNamedDestByName

		#region FPDF_GetNamedDest

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetNamedDest/*" />
		/// <seealso cref='Pdfium.FPDF_GetNamedDest(FPDF_DOCUMENT, int)'/>
        [HandleProcessCorruptedStateExceptions]
		private static FPDF_DEST FPDF_GetNamedDest(FPDF_DOCUMENT document, int index, IntPtr buffer, out int buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetNamedDest(document, index, buffer, out buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetNamedDest

		#region FPDF_GetNamedDest

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetNamedDest/*" />
		/// <seealso cref='Pdfium.FPDF_GetNamedDest(FPDF_DOCUMENT, int)'/>
        [HandleProcessCorruptedStateExceptions]
		private static FPDF_DEST FPDF_GetNamedDest(FPDF_DOCUMENT document, int index, ref byte buffer, ref int buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetNamedDest(document, index, ref buffer, ref buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetNamedDest

		#region FPDF_GetRecommendedV8Flags

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetRecommendedV8Flags/*" />
        [HandleProcessCorruptedStateExceptions]
		public static string FPDF_GetRecommendedV8Flags()
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetRecommendedV8Flags();
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetRecommendedV8Flags

		#region FPDFBookmark_GetFirstChild

		/// <include file="Pdfium.xml" path="Documentation/FPDFBookmark_GetFirstChild/*" />
		/// <seealso cref='PdfDocument.Bookmarks'/>
		/// <seealso cref='PdfBookmark.Children'/>
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_BOOKMARK FPDFBookmark_GetFirstChild(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFBookmark_GetFirstChild(document, bookmark);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFBookmark_GetFirstChild

		#region FPDFBookmark_GetNextSibling

		/// <include file="Pdfium.xml" path="Documentation/FPDFBookmark_GetNextSibling/*" />
		/// <seealso cref='PdfDocument.Bookmarks'/>
		/// <seealso cref='PdfBookmark.Children'/>
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_BOOKMARK FPDFBookmark_GetNextSibling(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFBookmark_GetNextSibling(document, bookmark);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFBookmark_GetNextSibling

		#region FPDFBookmark_GetTitle

		/// <include file="Pdfium.xml" path="Documentation/FPDFBookmark_GetTitle/*" />
		/// <seealso cref='Pdfium.FPDFBookmark_GetTitle(FPDF_BOOKMARK)'/>
        [HandleProcessCorruptedStateExceptions]
		private static uint FPDFBookmark_GetTitle(FPDF_BOOKMARK bookmark, ref byte buffer, uint buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFBookmark_GetTitle(bookmark, ref buffer, buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFBookmark_GetTitle

		#region FPDFBookmark_Find

		/// <include file="Pdfium.xml" path="Documentation/FPDFBookmark_Find/*" />
		/// <seealso cref='PdfDocument.FindBookmark(string)'/>
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_BOOKMARK FPDFBookmark_Find(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPWStr)] string title)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFBookmark_Find(document, title);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFBookmark_Find

		#region FPDFBookmark_GetDest

		/// <include file="Pdfium.xml" path="Documentation/FPDFBookmark_GetDest/*" />
		/// <seealso cref='PdfBookmark.Destination'/>
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_DEST FPDFBookmark_GetDest(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFBookmark_GetDest(document, bookmark);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFBookmark_GetDest

		#region FPDFBookmark_GetAction

		/// <include file="Pdfium.xml" path="Documentation/FPDFBookmark_GetAction/*" />
		/// <seealso cref='PdfBookmark.Action'/>
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_ACTION FPDFBookmark_GetAction(FPDF_BOOKMARK bookmark)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFBookmark_GetAction(bookmark);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFBookmark_GetAction

		#region FPDFAction_GetType

		/// <include file="Pdfium.xml" path="Documentation/FPDFAction_GetType/*" />
		/// <seealso cref='PdfAction.Type'/>
        [HandleProcessCorruptedStateExceptions]
		public static ActionTypes FPDFAction_GetType(FPDF_ACTION action)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFAction_GetType(action);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFAction_GetType

		#region FPDFAction_GetDest

		/// <include file="Pdfium.xml" path="Documentation/FPDFAction_GetDest/*" />
		/// <seealso cref='PdfAction.Destination'/>
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_DEST FPDFAction_GetDest(FPDF_DOCUMENT document, FPDF_ACTION action)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFAction_GetDest(document, action);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFAction_GetDest

		#region FPDFAction_GetFilePath

		/// <include file="Pdfium.xml" path="Documentation/FPDFAction_GetFilePath/*" />
		/// <seealso cref='Pdfium.FPDFAction_GetFilePath(FPDF_ACTION)'/>
        [HandleProcessCorruptedStateExceptions]
		private static uint FPDFAction_GetFilePath(FPDF_ACTION action, ref byte buffer, uint buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFAction_GetFilePath(action, ref buffer, buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFAction_GetFilePath

		#region FPDFAction_GetURIPath

		/// <include file="Pdfium.xml" path="Documentation/FPDFAction_GetURIPath/*" />
		/// <seealso cref='Pdfium.FPDFAction_GetURIPath(FPDF_DOCUMENT, FPDF_ACTION)'/>
        [HandleProcessCorruptedStateExceptions]
		private static uint FPDFAction_GetURIPath(FPDF_DOCUMENT document, FPDF_ACTION action, ref byte buffer, uint buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFAction_GetURIPath(document, action, ref buffer, buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFAction_GetURIPath

		#region FPDFDest_GetDestPageIndex

		/// <include file="Pdfium.xml" path="Documentation/FPDFDest_GetDestPageIndex/*" />
		/// <seealso cref='PdfDestination.PageIndex'/>
		/// <seealso cref='PdfDocument.Destinations'/>
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFDest_GetDestPageIndex(FPDF_DOCUMENT document, FPDF_DEST dest)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFDest_GetDestPageIndex(document, dest);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFDest_GetDestPageIndex

		#region FPDFDest_GetView

		/// <include file="Pdfium.xml" path="Documentation/FPDFDest_GetView/*" />
        [HandleProcessCorruptedStateExceptions]
		public static ZoomModes FPDFDest_GetView(FPDF_DEST dest, out uint pNumParams, float pParams)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFDest_GetView(dest, out pNumParams, pParams);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFDest_GetView

		#region FPDFDest_GetLocationInPage

		/// <include file="Pdfium.xml" path="Documentation/FPDFDest_GetLocationInPage/*" />
		/// <seealso cref='PdfDestination.LocationInPage'/>
		/// <seealso cref='PdfDocument.Destinations'/>
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFDest_GetLocationInPage(FPDF_DEST dest, out bool hasXCoord, out bool hasYCoord, out bool hasZoom, out float x, out float y, out float zoom)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFDest_GetLocationInPage(dest, out hasXCoord, out hasYCoord, out hasZoom, out x, out y, out zoom);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFDest_GetLocationInPage

		#region FPDFLink_GetLinkAtPoint

		/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetLinkAtPoint/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_LINK FPDFLink_GetLinkAtPoint(FPDF_PAGE page, double x, double y)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFLink_GetLinkAtPoint(page, x, y);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFLink_GetLinkAtPoint

		#region FPDFLink_GetLinkZOrderAtPoint

		/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetLinkZOrderAtPoint/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFLink_GetLinkZOrderAtPoint(FPDF_PAGE page, double x, double y)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFLink_GetLinkZOrderAtPoint(page, x, y);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFLink_GetLinkZOrderAtPoint

		#region FPDFLink_GetDest

		/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetDest/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_DEST FPDFLink_GetDest(FPDF_DOCUMENT document, FPDF_LINK link)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFLink_GetDest(document, link);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFLink_GetDest

		#region FPDFLink_GetAction

		/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetAction/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_ACTION FPDFLink_GetAction(FPDF_LINK link)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFLink_GetAction(link);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFLink_GetAction

		#region FPDFLink_Enumerate

		/// <include file="Pdfium.xml" path="Documentation/FPDFLink_Enumerate/*" />
        [HandleProcessCorruptedStateExceptions]
		private static bool FPDFLink_Enumerate(FPDF_PAGE page, ref int startPos, out FPDF_LINK linkAnnot)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFLink_Enumerate(page, ref startPos, out linkAnnot);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFLink_Enumerate

		#region FPDFLink_GetAnnotRect

		/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetAnnotRect/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFLink_GetAnnotRect(FPDF_LINK linkAnnot, out FS_RECTF rect)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFLink_GetAnnotRect(linkAnnot, out rect);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFLink_GetAnnotRect

		#region FPDFLink_CountQuadPoints

		/// <include file="Pdfium.xml" path="Documentation/FPDFLink_CountQuadPoints/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFLink_CountQuadPoints(FPDF_LINK linkAnnot)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFLink_CountQuadPoints(linkAnnot);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFLink_CountQuadPoints

		#region FPDFLink_GetQuadPoints

		/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetQuadPoints/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFLink_GetQuadPoints(FPDF_LINK linkAnnot, int quadIndex, out FS_QUADPOINTSF quadPoints)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFLink_GetQuadPoints(linkAnnot, quadIndex, out quadPoints);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFLink_GetQuadPoints

		#region FPDF_GetMetaText

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetMetaText/*" />
		/// <seealso cref='Pdfium.FPDF_GetMetaText(FPDF_DOCUMENT, string)'/>
		/// <seealso cref='Pdfium.FPDF_GetMetaText(FPDF_DOCUMENT, MetadataTags)'/>
        [HandleProcessCorruptedStateExceptions]
		public static uint FPDF_GetMetaText(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string tag, ref byte buffer, uint buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetMetaText(document, tag, ref buffer, buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetMetaText

		#region FPDF_GetPageLabel

		/// <include file="Pdfium.xml" path="Documentation/FPDF_GetPageLabel/*" />
		/// <seealso cref='Pdfium.FPDF_GetPageLabel(FPDF_DOCUMENT, int)'/>
        [HandleProcessCorruptedStateExceptions]
		private static uint FPDF_GetPageLabel(FPDF_DOCUMENT document, int page_index, ref byte buffer, uint buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_GetPageLabel(document, page_index, ref buffer, buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_GetPageLabel

		#region FPDF_CreateNewDocument

		/// <include file="Pdfium.xml" path="Documentation/FPDF_CreateNewDocument/*" />
		/// <seealso cref='PdfDocument'/>
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_DOCUMENT FPDF_CreateNewDocument()
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_CreateNewDocument();
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_CreateNewDocument

		#region FPDFPage_New

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_New/*" />
		/// <seealso cref='PdfPageCollection.Add(double, double)'/>
		/// <seealso cref='PdfPageCollection.Insert(int, double, double)'/>
		/// <seealso cref='PdfDocument.Pages'/>
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_PAGE FPDFPage_New(FPDF_DOCUMENT document, int page_index, double width, double height)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPage_New(document, page_index, width, height);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_New

		#region FPDFPage_Delete

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_Delete/*" />
		/// <seealso cref='PdfPageCollection.RemoveAt(int)'/>
		/// <seealso cref='PdfDocument.Pages'/>
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFPage_Delete(FPDF_DOCUMENT document, int page_index)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFPage_Delete(document, page_index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_Delete

		#region FPDFPage_GetRotation

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_GetRotation/*" />
		/// <seealso cref='PdfPage.Orientation'/>
        [HandleProcessCorruptedStateExceptions]
		public static PageOrientations FPDFPage_GetRotation(FPDF_PAGE page)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPage_GetRotation(page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_GetRotation

		#region FPDFPage_SetRotation

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_SetRotation/*" />
		/// <seealso cref='PdfPage.Orientation'/>
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFPage_SetRotation(FPDF_PAGE page, PageOrientations rotation)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFPage_SetRotation(page, rotation);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_SetRotation

		#region FPDFPage_InsertObject

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_InsertObject/*" />
        [HandleProcessCorruptedStateExceptions]
		private static void FPDFPage_InsertObject(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFPage_InsertObject(page, page_obj);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_InsertObject

		#region FPDFPage_RemoveObject

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_RemoveObject/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPage_RemoveObject(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPage_RemoveObject(page, page_obj);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_RemoveObject

		#region FPDFPage_CountObjects

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_CountObjects/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFPage_CountObjects(FPDF_PAGE page)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPage_CountObjects(page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_CountObjects

		#region FPDFPage_GetObject

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_GetObject/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_PAGEOBJECT FPDFPage_GetObject(FPDF_PAGE page, int index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPage_GetObject(page, index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_GetObject

		#region FPDFPage_HasTransparency

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_HasTransparency/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPage_HasTransparency(FPDF_PAGE page)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPage_HasTransparency(page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_HasTransparency

		#region FPDFPage_GenerateContent

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_GenerateContent/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPage_GenerateContent(FPDF_PAGE page)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPage_GenerateContent(page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_GenerateContent

		#region FPDFPageObj_Destroy

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_Destroy/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFPageObj_Destroy(FPDF_PAGEOBJECT page_obj)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFPageObj_Destroy(page_obj);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_Destroy

		#region FPDFPageObj_HasTransparency

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_HasTransparency/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObj_HasTransparency(FPDF_PAGEOBJECT pageObject)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_HasTransparency(pageObject);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_HasTransparency

		#region FPDFPageObj_GetType

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetType/*" />
        [HandleProcessCorruptedStateExceptions]
		public static PageObjTypes FPDFPageObj_GetType(FPDF_PAGEOBJECT page_object)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_GetType(page_object);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_GetType

		#region FPDFPageObj_Transform

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_Transform/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFPageObj_Transform(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFPageObj_Transform(page_object, a, b, c, d, e, f);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_Transform

		#region FPDFPage_TransformAnnots

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_TransformAnnots/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFPage_TransformAnnots(FPDF_PAGE page, double a, double b, double c, double d, double e, double f)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFPage_TransformAnnots(page, a, b, c, d, e, f);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_TransformAnnots

		#region FPDFPageObj_NewImageObj

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_NewImageObj/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_PAGEOBJECT FPDFPageObj_NewImageObj(FPDF_DOCUMENT document)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_NewImageObj(document);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_NewImageObj

		#region FPDFPageObj_CountMarks

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_CountMarks/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFPageObj_CountMarks(FPDF_PAGEOBJECT page_object)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_CountMarks(page_object);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_CountMarks

		#region FPDFPageObj_GetMark

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetMark/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_PAGEOBJECTMARK FPDFPageObj_GetMark(FPDF_PAGEOBJECT page_object, uint index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_GetMark(page_object, index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_GetMark

		#region FPDFPageObj_AddMark

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_AddMark/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_PAGEOBJECTMARK FPDFPageObj_AddMark(FPDF_PAGEOBJECT page_object, [MarshalAs(UnmanagedType.LPStr)] string name)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_AddMark(page_object, name);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_AddMark

		#region FPDFPageObj_RemoveMark

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_RemoveMark/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObj_RemoveMark(FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_RemoveMark(page_object, mark);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_RemoveMark

		#region FPDFPageObjMark_GetName

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_GetName/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObjMark_GetName(FPDF_PAGEOBJECTMARK mark, ref byte buffer, uint buflen, out uint out_buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObjMark_GetName(mark, ref buffer, buflen, out out_buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObjMark_GetName

		#region FPDFPageObjMark_CountParams

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_CountParams/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFPageObjMark_CountParams(FPDF_PAGEOBJECTMARK mark)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObjMark_CountParams(mark);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObjMark_CountParams

		#region FPDFPageObjMark_GetParamKey

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_GetParamKey/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObjMark_GetParamKey(FPDF_PAGEOBJECTMARK mark, uint index, ref byte buffer, uint buflen, out uint out_buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObjMark_GetParamKey(mark, index, ref buffer, buflen, out out_buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObjMark_GetParamKey

		#region FPDFPageObjMark_GetParamValueType

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_GetParamValueType/*" />
        [HandleProcessCorruptedStateExceptions]
		public static ObjectTypes FPDFPageObjMark_GetParamValueType(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObjMark_GetParamValueType(mark, key);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObjMark_GetParamValueType

		#region FPDFPageObjMark_GetParamIntValue

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_GetParamIntValue/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObjMark_GetParamIntValue(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, out int out_value)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObjMark_GetParamIntValue(mark, key, out out_value);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObjMark_GetParamIntValue

		#region FPDFPageObjMark_GetParamStringValue

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_GetParamStringValue/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObjMark_GetParamStringValue(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, uint buflen, out uint out_buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObjMark_GetParamStringValue(mark, key, ref buffer, buflen, out out_buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObjMark_GetParamStringValue

		#region FPDFPageObjMark_GetParamBlobValue

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_GetParamBlobValue/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObjMark_GetParamBlobValue(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, uint buflen, out uint out_buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObjMark_GetParamBlobValue(mark, key, ref buffer, buflen, out out_buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObjMark_GetParamBlobValue

		#region FPDFPageObjMark_SetIntParam

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_SetIntParam/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObjMark_SetIntParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, int value)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObjMark_SetIntParam(document, page_object, mark, key, value);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObjMark_SetIntParam

		#region FPDFPageObjMark_SetStringParam

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_SetStringParam/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObjMark_SetStringParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, [MarshalAs(UnmanagedType.LPStr)] string value)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObjMark_SetStringParam(document, page_object, mark, key, value);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObjMark_SetStringParam

		#region FPDFPageObjMark_SetBlobParam

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_SetBlobParam/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObjMark_SetBlobParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte value, uint value_len)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObjMark_SetBlobParam(document, page_object, mark, key, ref value, value_len);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObjMark_SetBlobParam

		#region FPDFPageObjMark_RemoveParam

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObjMark_RemoveParam/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObjMark_RemoveParam(FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObjMark_RemoveParam(page_object, mark, key);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObjMark_RemoveParam

		#region FPDFImageObj_LoadJpegFile

		/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_LoadJpegFile/*" />
        [HandleProcessCorruptedStateExceptions]
		private static bool FPDFImageObj_LoadJpegFile(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFImageObj_LoadJpegFile(ref pages, nCount, image_object, fileRead);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFImageObj_LoadJpegFile

		#region FPDFImageObj_LoadJpegFileInline

		/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_LoadJpegFileInline/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFImageObj_LoadJpegFileInline(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFImageObj_LoadJpegFileInline(ref pages, nCount, image_object, fileRead);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFImageObj_LoadJpegFileInline

		#region FPDFImageObj_GetMatrix

		/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_GetMatrix/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFImageObj_GetMatrix(FPDF_PAGEOBJECT image_object, out double a, out double b, out double c, out double d, out double e, out double f)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFImageObj_GetMatrix(image_object, out a, out b, out c, out d, out e, out f);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFImageObj_GetMatrix

		#region FPDFImageObj_SetMatrix

		/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_SetMatrix/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFImageObj_SetMatrix(FPDF_PAGEOBJECT image_object, double a, double b, double c, double d, double e, double f)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFImageObj_SetMatrix(image_object, a, b, c, d, e, f);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFImageObj_SetMatrix

		#region FPDFImageObj_SetBitmap

		/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_SetBitmap/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFImageObj_SetBitmap(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_BITMAP bitmap)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFImageObj_SetBitmap(ref pages, nCount, image_object, bitmap);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFImageObj_SetBitmap

		#region FPDFImageObj_GetBitmap

		/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_GetBitmap/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_BITMAP FPDFImageObj_GetBitmap(FPDF_PAGEOBJECT image_object)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFImageObj_GetBitmap(image_object);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFImageObj_GetBitmap

		#region FPDFImageObj_GetImageDataDecoded

		/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_GetImageDataDecoded/*" />
        [HandleProcessCorruptedStateExceptions]
		public static uint FPDFImageObj_GetImageDataDecoded(FPDF_PAGEOBJECT image_object, ref byte buffer, uint buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFImageObj_GetImageDataDecoded(image_object, ref buffer, buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFImageObj_GetImageDataDecoded

		#region FPDFImageObj_GetImageDataRaw

		/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_GetImageDataRaw/*" />
        [HandleProcessCorruptedStateExceptions]
		public static uint FPDFImageObj_GetImageDataRaw(FPDF_PAGEOBJECT image_object, ref byte buffer, uint buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFImageObj_GetImageDataRaw(image_object, ref buffer, buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFImageObj_GetImageDataRaw

		#region FPDFImageObj_GetImageFilterCount

		/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_GetImageFilterCount/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFImageObj_GetImageFilterCount(FPDF_PAGEOBJECT image_object)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFImageObj_GetImageFilterCount(image_object);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFImageObj_GetImageFilterCount

		#region FPDFImageObj_GetImageFilter

		/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_GetImageFilter/*" />
        [HandleProcessCorruptedStateExceptions]
		public static uint FPDFImageObj_GetImageFilter(FPDF_PAGEOBJECT image_object, int index, ref byte buffer, uint buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFImageObj_GetImageFilter(image_object, index, ref buffer, buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFImageObj_GetImageFilter

		#region FPDFImageObj_GetImageMetadata

		/// <include file="Pdfium.xml" path="Documentation/FPDFImageObj_GetImageMetadata/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFImageObj_GetImageMetadata(FPDF_PAGEOBJECT image_object, FPDF_PAGE page, out FPDF_IMAGEOBJ_METADATA metadata)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFImageObj_GetImageMetadata(image_object, page, out metadata);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFImageObj_GetImageMetadata

		#region FPDFPageObj_CreatenewPath

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_CreatenewPath/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_PAGEOBJECT FPDFPageObj_CreatenewPath(float x, float y)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_CreatenewPath(x, y);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_CreatenewPath

		#region FPDFPageObj_CreatenewRect

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_CreatenewRect/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_PAGEOBJECT FPDFPageObj_CreatenewRect(float x, float y, float w, float h)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_CreatenewRect(x, y, w, h);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_CreatenewRect

		#region FPDFPageObj_GetBounds

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetBounds/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObj_GetBounds(FPDF_PAGEOBJECT page_object, out float left, out float bottom, out float right, out float top)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_GetBounds(page_object, out left, out bottom, out right, out top);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_GetBounds

		#region FPDFPageObj_SetBlendMode

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_SetBlendMode/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFPageObj_SetBlendMode(FPDF_PAGEOBJECT page_object, [MarshalAs(UnmanagedType.LPStr)] string blend_mode)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFPageObj_SetBlendMode(page_object, blend_mode);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_SetBlendMode

		#region FPDFPageObj_SetStrokeColor

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_SetStrokeColor/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObj_SetStrokeColor(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_SetStrokeColor(page_object, R, G, B, A);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_SetStrokeColor

		#region FPDFPageObj_GetStrokeColor

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetStrokeColor/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObj_GetStrokeColor(FPDF_PAGEOBJECT page_object, out uint R, out uint G, out uint B, out uint A)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_GetStrokeColor(page_object, out R, out G, out B, out A);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_GetStrokeColor

		#region FPDFPageObj_SetStrokeWidth

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_SetStrokeWidth/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObj_SetStrokeWidth(FPDF_PAGEOBJECT page_object, float width)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_SetStrokeWidth(page_object, width);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_SetStrokeWidth

		#region FPDFPageObj_GetStrokeWidth

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetStrokeWidth/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObj_GetStrokeWidth(FPDF_PAGEOBJECT page_object, out float width)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_GetStrokeWidth(page_object, out width);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_GetStrokeWidth

		#region FPDFPageObj_GetLineJoin

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetLineJoin/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFPageObj_GetLineJoin(FPDF_PAGEOBJECT page_object)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_GetLineJoin(page_object);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_GetLineJoin

		#region FPDFPageObj_SetLineJoin

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_SetLineJoin/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObj_SetLineJoin(FPDF_PAGEOBJECT page_object, int line_join)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_SetLineJoin(page_object, line_join);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_SetLineJoin

		#region FPDFPageObj_GetLineCap

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetLineCap/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFPageObj_GetLineCap(FPDF_PAGEOBJECT page_object)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_GetLineCap(page_object);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_GetLineCap

		#region FPDFPageObj_SetLineCap

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_SetLineCap/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObj_SetLineCap(FPDF_PAGEOBJECT page_object, int line_cap)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_SetLineCap(page_object, line_cap);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_SetLineCap

		#region FPDFPageObj_SetFillColor

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_SetFillColor/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObj_SetFillColor(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_SetFillColor(page_object, R, G, B, A);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_SetFillColor

		#region FPDFPageObj_GetFillColor

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetFillColor/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPageObj_GetFillColor(FPDF_PAGEOBJECT page_object, out uint R, out uint G, out uint B, out uint A)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_GetFillColor(page_object, out R, out G, out B, out A);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_GetFillColor

		#region FPDFPath_CountSegments

		/// <include file="Pdfium.xml" path="Documentation/FPDFPath_CountSegments/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFPath_CountSegments(FPDF_PAGEOBJECT path)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPath_CountSegments(path);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPath_CountSegments

		#region FPDFPath_GetPathSegment

		/// <include file="Pdfium.xml" path="Documentation/FPDFPath_GetPathSegment/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_PATHSEGMENT FPDFPath_GetPathSegment(FPDF_PAGEOBJECT path, int index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPath_GetPathSegment(path, index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPath_GetPathSegment

		#region FPDFPathSegment_GetPoint

		/// <include file="Pdfium.xml" path="Documentation/FPDFPathSegment_GetPoint/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPathSegment_GetPoint(FPDF_PATHSEGMENT segment, out float x, out float y)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPathSegment_GetPoint(segment, out x, out y);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPathSegment_GetPoint

		#region FPDFPathSegment_GetType

		/// <include file="Pdfium.xml" path="Documentation/FPDFPathSegment_GetType/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFPathSegment_GetType(FPDF_PATHSEGMENT segment)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPathSegment_GetType(segment);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPathSegment_GetType

		#region FPDFPathSegment_GetClose

		/// <include file="Pdfium.xml" path="Documentation/FPDFPathSegment_GetClose/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPathSegment_GetClose(FPDF_PATHSEGMENT segment)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPathSegment_GetClose(segment);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPathSegment_GetClose

		#region FPDFPath_MoveTo

		/// <include file="Pdfium.xml" path="Documentation/FPDFPath_MoveTo/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPath_MoveTo(FPDF_PAGEOBJECT path, float x, float y)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPath_MoveTo(path, x, y);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPath_MoveTo

		#region FPDFPath_LineTo

		/// <include file="Pdfium.xml" path="Documentation/FPDFPath_LineTo/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPath_LineTo(FPDF_PAGEOBJECT path, float x, float y)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPath_LineTo(path, x, y);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPath_LineTo

		#region FPDFPath_BezierTo

		/// <include file="Pdfium.xml" path="Documentation/FPDFPath_BezierTo/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPath_BezierTo(FPDF_PAGEOBJECT path, float x1, float y1, float x2, float y2, float x3, float y3)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPath_BezierTo(path, x1, y1, x2, y2, x3, y3);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPath_BezierTo

		#region FPDFPath_Close

		/// <include file="Pdfium.xml" path="Documentation/FPDFPath_Close/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPath_Close(FPDF_PAGEOBJECT path)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPath_Close(path);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPath_Close

		#region FPDFPath_SetDrawMode

		/// <include file="Pdfium.xml" path="Documentation/FPDFPath_SetDrawMode/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPath_SetDrawMode(FPDF_PAGEOBJECT path, PathFillModes fillmode, bool stroke)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPath_SetDrawMode(path, fillmode, stroke);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPath_SetDrawMode

		#region FPDFPath_GetDrawMode

		/// <include file="Pdfium.xml" path="Documentation/FPDFPath_GetDrawMode/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPath_GetDrawMode(FPDF_PAGEOBJECT path, out PathFillModes fillmode, out bool stroke)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPath_GetDrawMode(path, out fillmode, out stroke);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPath_GetDrawMode

		#region FPDFPath_GetMatrix

		/// <include file="Pdfium.xml" path="Documentation/FPDFPath_GetMatrix/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPath_GetMatrix(FPDF_PAGEOBJECT path, FS_MATRIX matrix)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPath_GetMatrix(path, matrix);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPath_GetMatrix

		#region FPDFPath_SetMatrix

		/// <include file="Pdfium.xml" path="Documentation/FPDFPath_SetMatrix/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPath_SetMatrix(FPDF_PAGEOBJECT path, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPath_SetMatrix(path, matrix);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPath_SetMatrix

		#region FPDFPageObj_NewTextObj

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_NewTextObj/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_PAGEOBJECT FPDFPageObj_NewTextObj(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font, float font_size)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_NewTextObj(document, font, font_size);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_NewTextObj

		#region FPDFText_SetText

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_SetText/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFText_SetText(FPDF_PAGEOBJECT text_object, [MarshalAs(UnmanagedType.LPWStr)] string text)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_SetText(text_object, text);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_SetText

		#region FPDFText_LoadFont

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_LoadFont/*" />
        [HandleProcessCorruptedStateExceptions]
		private static FPDF_FONT FPDFText_LoadFont(FPDF_DOCUMENT document, ref byte data, uint size, FontTypes font_type, bool cid)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_LoadFont(document, ref data, size, font_type, cid);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_LoadFont

		#region FPDFText_LoadStandardFont

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_LoadStandardFont/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_FONT FPDFText_LoadStandardFont(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_LoadStandardFont(document, font);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_LoadStandardFont

		#region FPDFTextObj_GetMatrix

		/// <include file="Pdfium.xml" path="Documentation/FPDFTextObj_GetMatrix/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFTextObj_GetMatrix(FPDF_PAGEOBJECT text, FS_MATRIX matrix)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFTextObj_GetMatrix(text, matrix);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFTextObj_GetMatrix

		#region FPDFTextObj_GetFontSize

		/// <include file="Pdfium.xml" path="Documentation/FPDFTextObj_GetFontSize/*" />
        [HandleProcessCorruptedStateExceptions]
		public static float FPDFTextObj_GetFontSize(FPDF_PAGEOBJECT text)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFTextObj_GetFontSize(text);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFTextObj_GetFontSize

		#region FPDFFont_Close

		/// <include file="Pdfium.xml" path="Documentation/FPDFFont_Close/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFFont_Close(FPDF_FONT font)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFFont_Close(font);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFFont_Close

		#region FPDFPageObj_CreateTextObj

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_CreateTextObj/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_PAGEOBJECT FPDFPageObj_CreateTextObj(FPDF_DOCUMENT document, FPDF_FONT font, float font_size)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_CreateTextObj(document, font, font_size);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_CreateTextObj

		#region FPDFTextObj_GetTextRenderMode

		/// <include file="Pdfium.xml" path="Documentation/FPDFTextObj_GetTextRenderMode/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_TEXT_RENDERMODE FPDFTextObj_GetTextRenderMode(FPDF_PAGEOBJECT text)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFTextObj_GetTextRenderMode(text);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFTextObj_GetTextRenderMode

		#region FPDFTextObj_SetTextRenderMode

		/// <include file="Pdfium.xml" path="Documentation/FPDFTextObj_SetTextRenderMode/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFTextObj_SetTextRenderMode(FPDF_PAGEOBJECT text, FPDF_TEXT_RENDERMODE render_mode)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFTextObj_SetTextRenderMode(text, render_mode);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFTextObj_SetTextRenderMode

		#region FPDFTextObj_GetFontName

		/// <include file="Pdfium.xml" path="Documentation/FPDFTextObj_GetFontName/*" />
        [HandleProcessCorruptedStateExceptions]
		public static uint FPDFTextObj_GetFontName(FPDF_PAGEOBJECT text, ref byte buffer, uint length)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFTextObj_GetFontName(text, ref buffer, length);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFTextObj_GetFontName

		#region FPDFTextObj_GetText

		/// <include file="Pdfium.xml" path="Documentation/FPDFTextObj_GetText/*" />
        [HandleProcessCorruptedStateExceptions]
		public static uint FPDFTextObj_GetText(FPDF_PAGEOBJECT text_object, FPDF_TEXTPAGE text_page, ref byte buffer, uint length)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFTextObj_GetText(text_object, text_page, ref buffer, length);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFTextObj_GetText

		#region FPDFFormObj_CountObjects

		/// <include file="Pdfium.xml" path="Documentation/FPDFFormObj_CountObjects/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFFormObj_CountObjects(FPDF_PAGEOBJECT form_object)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFFormObj_CountObjects(form_object);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFFormObj_CountObjects

		#region FPDFFormObj_GetObject

		/// <include file="Pdfium.xml" path="Documentation/FPDFFormObj_GetObject/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_PAGEOBJECT FPDFFormObj_GetObject(FPDF_PAGEOBJECT form_object, uint index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFFormObj_GetObject(form_object, index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFFormObj_GetObject

		#region FPDFFormObj_GetMatrix

		/// <include file="Pdfium.xml" path="Documentation/FPDFFormObj_GetMatrix/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFFormObj_GetMatrix(FPDF_PAGEOBJECT form_object, FS_MATRIX matrix)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFFormObj_GetMatrix(form_object, matrix);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFFormObj_GetMatrix

		#region FPDFDoc_GetPageMode

		/// <include file="Pdfium.xml" path="Documentation/FPDFDoc_GetPageMode/*" />
		/// <seealso cref='PdfDocument.PageMode'/>
        [HandleProcessCorruptedStateExceptions]
		public static PageModes FPDFDoc_GetPageMode(FPDF_DOCUMENT document)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFDoc_GetPageMode(document);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFDoc_GetPageMode

		#region FPDFPage_Flatten

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_Flatten/*" />
		/// <seealso cref='PdfPage.Flatten(FlattenFlags)'/>
        [HandleProcessCorruptedStateExceptions]
		public static FlattenResults FPDFPage_Flatten(FPDF_PAGE page, FlattenFlags nFlag)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPage_Flatten(page, nFlag);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_Flatten

		#region FPDF_ImportPages

		/// <include file="Pdfium.xml" path="Documentation/FPDF_ImportPages/*" />
		/// <seealso cref='PdfPageCollection.Insert(int, PdfDocument, int[])'/>
		/// <seealso cref='PdfPageCollection.Add(PdfDocument, int[])'/>
		/// <seealso cref='PdfDocument.Pages'/>
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDF_ImportPages(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, [MarshalAs(UnmanagedType.LPStr)] string pagerange, int index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_ImportPages(dest_doc, src_doc, pagerange, index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_ImportPages

		#region FPDF_ImportNPagesToOne

		/// <include file="Pdfium.xml" path="Documentation/FPDF_ImportNPagesToOne/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_DOCUMENT FPDF_ImportNPagesToOne(FPDF_DOCUMENT src_doc, float output_width, float output_height, int num_pages_on_x_axis, int num_pages_on_y_axis)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_ImportNPagesToOne(src_doc, output_width, output_height, num_pages_on_x_axis, num_pages_on_y_axis);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_ImportNPagesToOne

		#region FPDF_CopyViewerPreferences

		/// <include file="Pdfium.xml" path="Documentation/FPDF_CopyViewerPreferences/*" />
		/// <seealso cref='PdfDocument.CopyViewerPreferencesFrom(PdfDocument)'/>
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDF_CopyViewerPreferences(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_CopyViewerPreferences(dest_doc, src_doc);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_CopyViewerPreferences

		#region FPDF_RenderPageBitmap_Start

		/// <include file="Pdfium.xml" path="Documentation/FPDF_RenderPageBitmap_Start/*" />
        [HandleProcessCorruptedStateExceptions]
		public static RenderingStatus FPDF_RenderPageBitmap_Start(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags, IFSDK_PAUSE pause)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_RenderPageBitmap_Start(bitmap, page, start_x, start_y, size_x, size_y, rotate, flags, pause);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_RenderPageBitmap_Start

		#region FPDF_RenderPage_Continue

		/// <include file="Pdfium.xml" path="Documentation/FPDF_RenderPage_Continue/*" />
        [HandleProcessCorruptedStateExceptions]
		public static RenderingStatus FPDF_RenderPage_Continue(FPDF_PAGE page, IFSDK_PAUSE pause)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_RenderPage_Continue(page, pause);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_RenderPage_Continue

		#region FPDF_RenderPage_Close

		/// <include file="Pdfium.xml" path="Documentation/FPDF_RenderPage_Close/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDF_RenderPage_Close(FPDF_PAGE page)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDF_RenderPage_Close(page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_RenderPage_Close

		#region FPDF_SaveAsCopy

		/// <include file="Pdfium.xml" path="Documentation/FPDF_SaveAsCopy/*" />
		/// <seealso cref='Pdfium.FPDF_SaveAsCopy(FPDF_DOCUMENT, System.IO.Stream, SaveFlags, int)'/>
		/// <seealso cref='PdfDocument.Save(System.IO.Stream, SaveFlags, int)'/>
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDF_SaveAsCopy(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_SaveAsCopy(document, fileWrite, flags);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_SaveAsCopy

		#region FPDF_SaveWithVersion

		/// <include file="Pdfium.xml" path="Documentation/FPDF_SaveWithVersion/*" />
		/// <seealso cref='Pdfium.FPDF_SaveAsCopy(FPDF_DOCUMENT, System.IO.Stream, SaveFlags, int)'/>
		/// <seealso cref='PdfDocument.Save(System.IO.Stream, SaveFlags, int)'/>
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDF_SaveWithVersion(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags, int fileVersion)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_SaveWithVersion(document, fileWrite, flags, fileVersion);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_SaveWithVersion

		#region FPDFText_GetCharIndexFromTextIndex

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetCharIndexFromTextIndex/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFText_GetCharIndexFromTextIndex(FPDF_TEXTPAGE text_page, int nTextIndex)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetCharIndexFromTextIndex(text_page, nTextIndex);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetCharIndexFromTextIndex

		#region FPDFText_GetTextIndexFromCharIndex

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetTextIndexFromCharIndex/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFText_GetTextIndexFromCharIndex(FPDF_TEXTPAGE text_page, int nCharIndex)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetTextIndexFromCharIndex(text_page, nCharIndex);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetTextIndexFromCharIndex

		#region FPDF_StructTree_GetForPage

		/// <include file="Pdfium.xml" path="Documentation/FPDF_StructTree_GetForPage/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_STRUCTTREE FPDF_StructTree_GetForPage(FPDF_PAGE page)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_StructTree_GetForPage(page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_StructTree_GetForPage

		#region FPDF_StructTree_Close

		/// <include file="Pdfium.xml" path="Documentation/FPDF_StructTree_Close/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDF_StructTree_Close(FPDF_STRUCTTREE struct_tree)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDF_StructTree_Close(struct_tree);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_StructTree_Close

		#region FPDF_StructTree_CountChildren

		/// <include file="Pdfium.xml" path="Documentation/FPDF_StructTree_CountChildren/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDF_StructTree_CountChildren(FPDF_STRUCTTREE struct_tree)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_StructTree_CountChildren(struct_tree);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_StructTree_CountChildren

		#region FPDF_StructTree_GetChildAtIndex

		/// <include file="Pdfium.xml" path="Documentation/FPDF_StructTree_GetChildAtIndex/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_STRUCTELEMENT FPDF_StructTree_GetChildAtIndex(FPDF_STRUCTTREE struct_tree, int index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_StructTree_GetChildAtIndex(struct_tree, index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_StructTree_GetChildAtIndex

		#region FPDF_StructElement_GetAltText

		/// <include file="Pdfium.xml" path="Documentation/FPDF_StructElement_GetAltText/*" />
        [HandleProcessCorruptedStateExceptions]
		private static uint FPDF_StructElement_GetAltText(FPDF_STRUCTELEMENT struct_element, ref byte buffer, uint buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_StructElement_GetAltText(struct_element, ref buffer, buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_StructElement_GetAltText

		#region FPDF_StructElement_GetMarkedContentID

		/// <include file="Pdfium.xml" path="Documentation/FPDF_StructElement_GetMarkedContentID/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDF_StructElement_GetMarkedContentID(FPDF_STRUCTELEMENT struct_element)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_StructElement_GetMarkedContentID(struct_element);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_StructElement_GetMarkedContentID

		#region FPDF_StructElement_GetType

		/// <include file="Pdfium.xml" path="Documentation/FPDF_StructElement_GetType/*" />
        [HandleProcessCorruptedStateExceptions]
		public static uint FPDF_StructElement_GetType(FPDF_STRUCTELEMENT struct_element, ref byte buffer, uint buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_StructElement_GetType(struct_element, ref buffer, buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_StructElement_GetType

		#region FPDF_StructElement_GetTitle

		/// <include file="Pdfium.xml" path="Documentation/FPDF_StructElement_GetTitle/*" />
        [HandleProcessCorruptedStateExceptions]
		public static uint FPDF_StructElement_GetTitle(FPDF_STRUCTELEMENT struct_element, ref byte buffer, uint buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_StructElement_GetTitle(struct_element, ref buffer, buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_StructElement_GetTitle

		#region FPDF_StructElement_CountChildren

		/// <include file="Pdfium.xml" path="Documentation/FPDF_StructElement_CountChildren/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDF_StructElement_CountChildren(FPDF_STRUCTELEMENT struct_element)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_StructElement_CountChildren(struct_element);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_StructElement_CountChildren

		#region FPDF_StructElement_GetChildAtIndex

		/// <include file="Pdfium.xml" path="Documentation/FPDF_StructElement_GetChildAtIndex/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_STRUCTELEMENT FPDF_StructElement_GetChildAtIndex(FPDF_STRUCTELEMENT struct_element, int index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_StructElement_GetChildAtIndex(struct_element, index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_StructElement_GetChildAtIndex

		#region FPDFText_LoadPage

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_LoadPage/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_TEXTPAGE FPDFText_LoadPage(FPDF_PAGE page)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_LoadPage(page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_LoadPage

		#region FPDFText_ClosePage

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_ClosePage/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFText_ClosePage(FPDF_TEXTPAGE text_page)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFText_ClosePage(text_page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_ClosePage

		#region FPDFText_CountChars

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_CountChars/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFText_CountChars(FPDF_TEXTPAGE text_page)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_CountChars(text_page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_CountChars

		#region FPDFText_GetUnicode

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetUnicode/*" />
        [HandleProcessCorruptedStateExceptions]
		public static char FPDFText_GetUnicode(FPDF_TEXTPAGE text_page, int index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetUnicode(text_page, index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetUnicode

		#region FPDFText_GetFontSize

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetFontSize/*" />
        [HandleProcessCorruptedStateExceptions]
		public static double FPDFText_GetFontSize(FPDF_TEXTPAGE text_page, int index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetFontSize(text_page, index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetFontSize

		#region FPDFText_GetFontInfo

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetFontInfo/*" />
        [HandleProcessCorruptedStateExceptions]
		public static uint FPDFText_GetFontInfo(FPDF_TEXTPAGE text_page, int index, ref byte buffer, uint buflen, out int flags)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetFontInfo(text_page, index, ref buffer, buflen, out flags);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetFontInfo

		#region FPDFText_GetFontWeight

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetFontWeight/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFText_GetFontWeight(FPDF_TEXTPAGE text_page, int index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetFontWeight(text_page, index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetFontWeight

		#region FPDFText_GetTextRenderMode

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetTextRenderMode/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_TEXT_RENDERMODE FPDFText_GetTextRenderMode(FPDF_TEXTPAGE text_page, int index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetTextRenderMode(text_page, index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetTextRenderMode

		#region FPDFText_GetFillColor

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetFillColor/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFText_GetFillColor(FPDF_TEXTPAGE text_page, int index, out uint R, out uint G, out uint B, out uint A)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetFillColor(text_page, index, out R, out G, out B, out A);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetFillColor

		#region FPDFText_GetStrokeColor

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetStrokeColor/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFText_GetStrokeColor(FPDF_TEXTPAGE text_page, int index, out uint R, out uint G, out uint B, out uint A)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetStrokeColor(text_page, index, out R, out G, out B, out A);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetStrokeColor

		#region FPDFText_GetCharAngle

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetCharAngle/*" />
        [HandleProcessCorruptedStateExceptions]
		public static float FPDFText_GetCharAngle(FPDF_TEXTPAGE text_page, int index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetCharAngle(text_page, index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetCharAngle

		#region FPDFText_GetCharBox

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetCharBox/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFText_GetCharBox(FPDF_TEXTPAGE text_page, int index, out double left, out double right, out double bottom, out double top)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetCharBox(text_page, index, out left, out right, out bottom, out top);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetCharBox

		#region FPDFText_GetLooseCharBox

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetLooseCharBox/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFText_GetLooseCharBox(FPDF_TEXTPAGE text_page, int index, FS_RECTF rect)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetLooseCharBox(text_page, index, rect);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetLooseCharBox

		#region FPDFText_GetMatrix

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetMatrix/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFText_GetMatrix(FPDF_TEXTPAGE text_page, int index, FS_MATRIX matrix)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetMatrix(text_page, index, matrix);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetMatrix

		#region FPDFText_GetCharOrigin

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetCharOrigin/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFText_GetCharOrigin(FPDF_TEXTPAGE text_page, int index, out double x, out double y)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetCharOrigin(text_page, index, out x, out y);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetCharOrigin

		#region FPDFText_GetCharIndexAtPos

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetCharIndexAtPos/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFText_GetCharIndexAtPos(FPDF_TEXTPAGE text_page, double x, double y, double xTolerance, double yTolerance)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetCharIndexAtPos(text_page, x, y, xTolerance, yTolerance);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetCharIndexAtPos

		#region FPDFText_GetText

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetText/*" />
        [HandleProcessCorruptedStateExceptions]
		private static int FPDFText_GetText(FPDF_TEXTPAGE text_page, int start_index, int count, ref byte result)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetText(text_page, start_index, count, ref result);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetText

		#region FPDFText_CountRects

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_CountRects/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFText_CountRects(FPDF_TEXTPAGE text_page, int start_index, int count)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_CountRects(text_page, start_index, count);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_CountRects

		#region FPDFText_GetRect

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetRect/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFText_GetRect(FPDF_TEXTPAGE text_page, int rect_index, out double left, out double top, out double right, out double bottom)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetRect(text_page, rect_index, out left, out top, out right, out bottom);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetRect

		#region FPDFText_GetBoundedText

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetBoundedText/*" />
        [HandleProcessCorruptedStateExceptions]
		private static int FPDFText_GetBoundedText(FPDF_TEXTPAGE text_page, double left, double top, double right, double bottom, ref byte buffer, int buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetBoundedText(text_page, left, top, right, bottom, ref buffer, buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetBoundedText

		#region FPDFText_FindStart

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_FindStart/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_SCHHANDLE FPDFText_FindStart(FPDF_TEXTPAGE text_page, [MarshalAs(UnmanagedType.LPWStr)] string findwhat, SearchFlags flags, int start_index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_FindStart(text_page, findwhat, flags, start_index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_FindStart

		#region FPDFText_FindNext

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_FindNext/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFText_FindNext(FPDF_SCHHANDLE handle)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_FindNext(handle);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_FindNext

		#region FPDFText_FindPrev

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_FindPrev/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFText_FindPrev(FPDF_SCHHANDLE handle)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_FindPrev(handle);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_FindPrev

		#region FPDFText_GetSchResultIndex

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetSchResultIndex/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFText_GetSchResultIndex(FPDF_SCHHANDLE handle)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetSchResultIndex(handle);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetSchResultIndex

		#region FPDFText_GetSchCount

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_GetSchCount/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFText_GetSchCount(FPDF_SCHHANDLE handle)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFText_GetSchCount(handle);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_GetSchCount

		#region FPDFText_FindClose

		/// <include file="Pdfium.xml" path="Documentation/FPDFText_FindClose/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFText_FindClose(FPDF_SCHHANDLE handle)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFText_FindClose(handle);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFText_FindClose

		#region FPDFLink_LoadWebLinks

		/// <include file="Pdfium.xml" path="Documentation/FPDFLink_LoadWebLinks/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_PAGELINK FPDFLink_LoadWebLinks(FPDF_TEXTPAGE text_page)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFLink_LoadWebLinks(text_page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFLink_LoadWebLinks

		#region FPDFLink_CountWebLinks

		/// <include file="Pdfium.xml" path="Documentation/FPDFLink_CountWebLinks/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFLink_CountWebLinks(FPDF_PAGELINK link_page)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFLink_CountWebLinks(link_page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFLink_CountWebLinks

		#region FPDFLink_GetURL

		/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetURL/*" />
        [HandleProcessCorruptedStateExceptions]
		private static int FPDFLink_GetURL(FPDF_PAGELINK link_page, int link_index, ref byte buffer, int buflen)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFLink_GetURL(link_page, link_index, ref buffer, buflen);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFLink_GetURL

		#region FPDFLink_CountRects

		/// <include file="Pdfium.xml" path="Documentation/FPDFLink_CountRects/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFLink_CountRects(FPDF_PAGELINK link_page, int link_index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFLink_CountRects(link_page, link_index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFLink_CountRects

		#region FPDFLink_GetRect

		/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetRect/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFLink_GetRect(FPDF_PAGELINK link_page, int link_index, int rect_index, out double left, out double top, out double right, out double bottom)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFLink_GetRect(link_page, link_index, rect_index, out left, out top, out right, out bottom);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFLink_GetRect

		#region FPDFLink_GetTextRange

		/// <include file="Pdfium.xml" path="Documentation/FPDFLink_GetTextRange/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFLink_GetTextRange(FPDF_PAGELINK link_page, int link_index, out int start_char_index, out int char_count)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFLink_GetTextRange(link_page, link_index, out start_char_index, out char_count);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFLink_GetTextRange

		#region FPDFLink_CloseWebLinks

		/// <include file="Pdfium.xml" path="Documentation/FPDFLink_CloseWebLinks/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFLink_CloseWebLinks(FPDF_PAGELINK link_page)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFLink_CloseWebLinks(link_page);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFLink_CloseWebLinks

		#region FPDFPage_SetMediaBox

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_SetMediaBox/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFPage_SetMediaBox(FPDF_PAGE page, float left, float bottom, float right, float top)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFPage_SetMediaBox(page, left, bottom, right, top);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_SetMediaBox

		#region FPDFPage_SetCropBox

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_SetCropBox/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFPage_SetCropBox(FPDF_PAGE page, float left, float bottom, float right, float top)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFPage_SetCropBox(page, left, bottom, right, top);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_SetCropBox

		#region FPDFPage_SetBleedBox

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_SetBleedBox/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFPage_SetBleedBox(FPDF_PAGE page, float left, float bottom, float right, float top)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFPage_SetBleedBox(page, left, bottom, right, top);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_SetBleedBox

		#region FPDFPage_SetTrimBox

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_SetTrimBox/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFPage_SetTrimBox(FPDF_PAGE page, float left, float bottom, float right, float top)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFPage_SetTrimBox(page, left, bottom, right, top);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_SetTrimBox

		#region FPDFPage_SetArtBox

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_SetArtBox/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFPage_SetArtBox(FPDF_PAGE page, float left, float bottom, float right, float top)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFPage_SetArtBox(page, left, bottom, right, top);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_SetArtBox

		#region FPDFPage_GetMediaBox

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_GetMediaBox/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPage_GetMediaBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPage_GetMediaBox(page, out left, out bottom, out right, out top);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_GetMediaBox

		#region FPDFPage_GetCropBox

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_GetCropBox/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPage_GetCropBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPage_GetCropBox(page, out left, out bottom, out right, out top);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_GetCropBox

		#region FPDFPage_GetBleedBox

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_GetBleedBox/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPage_GetBleedBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPage_GetBleedBox(page, out left, out bottom, out right, out top);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_GetBleedBox

		#region FPDFPage_GetTrimBox

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_GetTrimBox/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPage_GetTrimBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPage_GetTrimBox(page, out left, out bottom, out right, out top);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_GetTrimBox

		#region FPDFPage_GetArtBox

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_GetArtBox/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPage_GetArtBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPage_GetArtBox(page, out left, out bottom, out right, out top);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_GetArtBox

		#region FPDFPage_TransFormWithClip

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_TransFormWithClip/*" />
        [HandleProcessCorruptedStateExceptions]
		public static bool FPDFPage_TransFormWithClip(FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipRect)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPage_TransFormWithClip(page, matrix, clipRect);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_TransFormWithClip

		#region FPDFPageObj_TransformClipPath

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_TransformClipPath/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFPageObj_TransformClipPath(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFPageObj_TransformClipPath(page_object, a, b, c, d, e, f);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_TransformClipPath

		#region FPDFPageObj_GetClipPath

		/// <include file="Pdfium.xml" path="Documentation/FPDFPageObj_GetClipPath/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_CLIPPATH FPDFPageObj_GetClipPath(FPDF_PAGEOBJECT page_object)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFPageObj_GetClipPath(page_object);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPageObj_GetClipPath

		#region FPDFClipPath_CountPaths

		/// <include file="Pdfium.xml" path="Documentation/FPDFClipPath_CountPaths/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFClipPath_CountPaths(FPDF_CLIPPATH clip_path)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFClipPath_CountPaths(clip_path);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFClipPath_CountPaths

		#region FPDFClipPath_CountPathSegments

		/// <include file="Pdfium.xml" path="Documentation/FPDFClipPath_CountPathSegments/*" />
        [HandleProcessCorruptedStateExceptions]
		public static int FPDFClipPath_CountPathSegments(FPDF_CLIPPATH clip_path, int path_index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFClipPath_CountPathSegments(clip_path, path_index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFClipPath_CountPathSegments

		#region FPDFClipPath_GetPathSegment

		/// <include file="Pdfium.xml" path="Documentation/FPDFClipPath_GetPathSegment/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_PATHSEGMENT FPDFClipPath_GetPathSegment(FPDF_CLIPPATH clip_path, int path_index, int segment_index)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDFClipPath_GetPathSegment(clip_path, path_index, segment_index);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFClipPath_GetPathSegment

		#region FPDF_CreateClipPath

		/// <include file="Pdfium.xml" path="Documentation/FPDF_CreateClipPath/*" />
        [HandleProcessCorruptedStateExceptions]
		public static FPDF_CLIPPATH FPDF_CreateClipPath(float left, float bottom, float right, float top)
		{
            lock(_lock) 
            {
                try
                {
                    return PlatformInvoke.FPDF_CreateClipPath(left, bottom, right, top);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_CreateClipPath

		#region FPDF_DestroyClipPath

		/// <include file="Pdfium.xml" path="Documentation/FPDF_DestroyClipPath/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDF_DestroyClipPath(FPDF_CLIPPATH clipPath)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDF_DestroyClipPath(clipPath);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDF_DestroyClipPath

		#region FPDFPage_InsertClipPath

		/// <include file="Pdfium.xml" path="Documentation/FPDFPage_InsertClipPath/*" />
        [HandleProcessCorruptedStateExceptions]
		public static void FPDFPage_InsertClipPath(FPDF_PAGE page, FPDF_CLIPPATH clipPath)
		{
            lock(_lock) 
            {
                try
                {
                    PlatformInvoke.FPDFPage_InsertClipPath(page, clipPath);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion FPDFPage_InsertClipPath

  
        #region PlatformInvoke
              
        private static class PlatformInvoke
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_InitLibrary", SetLastError = true)]
			internal static extern void FPDF_InitLibrary();

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_InitLibraryWithConfig", SetLastError = true)]
			internal static extern void FPDF_InitLibraryWithConfig(ref FPDF_LIBRARY_CONFIG config);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_DestroyLibrary", SetLastError = true)]
			internal static extern void FPDF_DestroyLibrary();

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_SetSandBoxPolicy", SetLastError = true)]
			internal static extern void FPDF_SetSandBoxPolicy(int policy, bool enable);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_SetPrintTextWithGDI", SetLastError = true)]
			internal static extern void FPDF_SetPrintTextWithGDI(bool use_gdi);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_SetPrintMode", SetLastError = true)]
			internal static extern bool FPDF_SetPrintMode(int mode);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_LoadDocument", SetLastError = true)]
			internal static extern FPDF_DOCUMENT FPDF_LoadDocument([MarshalAs(UnmanagedType.LPStr)] string file_path, [MarshalAs(UnmanagedType.LPStr)] string password);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_LoadMemDocument", SetLastError = true)]
			internal static extern FPDF_DOCUMENT FPDF_LoadMemDocument(ref byte data_buf, int size, [MarshalAs(UnmanagedType.LPStr)] string password);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_LoadCustomDocument", SetLastError = true)]
			internal static extern FPDF_DOCUMENT FPDF_LoadCustomDocument(FPDF_FILEREAD fileRead, [MarshalAs(UnmanagedType.LPStr)] string password);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetFileVersion", SetLastError = true)]
			internal static extern bool FPDF_GetFileVersion(FPDF_DOCUMENT doc, out int fileVersion);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetLastError", SetLastError = true)]
			internal static extern FPDF_ERR FPDF_GetLastError();

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_DocumentHasValidCrossReferenceTable", SetLastError = true)]
			internal static extern bool FPDF_DocumentHasValidCrossReferenceTable(FPDF_DOCUMENT document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetTrailerEnds", SetLastError = true)]
			internal static extern int FPDF_GetTrailerEnds(FPDF_DOCUMENT document, byte[] buffer, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetDocPermissions", SetLastError = true)]
			internal static extern DocumentPermissions FPDF_GetDocPermissions(FPDF_DOCUMENT document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetSecurityHandlerRevision", SetLastError = true)]
			internal static extern int FPDF_GetSecurityHandlerRevision(FPDF_DOCUMENT document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetPageCount", SetLastError = true)]
			internal static extern int FPDF_GetPageCount(FPDF_DOCUMENT document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_LoadPage", SetLastError = true)]
			internal static extern FPDF_PAGE FPDF_LoadPage(FPDF_DOCUMENT document, int page_index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetPageWidthF", SetLastError = true)]
			internal static extern float FPDF_GetPageWidthF(FPDF_PAGE page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetPageWidth", SetLastError = true)]
			internal static extern double FPDF_GetPageWidth(FPDF_PAGE page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetPageHeightF", SetLastError = true)]
			internal static extern float FPDF_GetPageHeightF(FPDF_PAGE page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetPageHeight", SetLastError = true)]
			internal static extern double FPDF_GetPageHeight(FPDF_PAGE page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetPageBoundingBox", SetLastError = true)]
			internal static extern bool FPDF_GetPageBoundingBox(FPDF_PAGE page, FS_RECTF rect);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetPageSizeByIndexF", SetLastError = true)]
			internal static extern bool FPDF_GetPageSizeByIndexF(FPDF_DOCUMENT document, int index, FS_SIZEF size);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetPageSizeByIndex", SetLastError = true)]
			internal static extern bool FPDF_GetPageSizeByIndex(FPDF_DOCUMENT document, int index, out double width, out double height);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_RenderPageBitmap", SetLastError = true)]
			internal static extern void FPDF_RenderPageBitmap(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_RenderPage", SetLastError = true)]
			internal static extern void FPDF_RenderPage(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_RenderPageBitmapWithMatrix", SetLastError = true)]
			internal static extern void FPDF_RenderPageBitmapWithMatrix(FPDF_BITMAP bitmap, FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipping, RenderingFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_RenderPageSkp", SetLastError = true)]
			internal static extern FPDF_RECORDER FPDF_RenderPageSkp(FPDF_PAGE page, int size_x, int size_y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_ClosePage", SetLastError = true)]
			internal static extern void FPDF_ClosePage(FPDF_PAGE page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_CloseDocument", SetLastError = true)]
			internal static extern void FPDF_CloseDocument(FPDF_DOCUMENT document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_DeviceToPage", SetLastError = true)]
			internal static extern void FPDF_DeviceToPage(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, int device_x, int device_y, out double page_x, out double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_PageToDevice", SetLastError = true)]
			internal static extern void FPDF_PageToDevice(FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, double page_x, double page_y, out int device_x, out int device_y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFBitmap_Create", SetLastError = true)]
			internal static extern FPDF_BITMAP FPDFBitmap_Create(int width, int height, bool hasAlpha);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFBitmap_CreateEx", SetLastError = true)]
			internal static extern FPDF_BITMAP FPDFBitmap_CreateEx(int width, int height, BitmapFormats format, IntPtr first_scan, int stride);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFBitmap_GetFormat", SetLastError = true)]
			internal static extern BitmapFormats FPDFBitmap_GetFormat(FPDF_BITMAP bitmap);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFBitmap_FillRect", SetLastError = true)]
			internal static extern void FPDFBitmap_FillRect(FPDF_BITMAP bitmap, int left, int top, int width, int height, FPDF_COLOR color);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFBitmap_GetBuffer", SetLastError = true)]
			internal static extern IntPtr FPDFBitmap_GetBuffer(FPDF_BITMAP bitmap);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFBitmap_GetWidth", SetLastError = true)]
			internal static extern int FPDFBitmap_GetWidth(FPDF_BITMAP bitmap);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFBitmap_GetHeight", SetLastError = true)]
			internal static extern int FPDFBitmap_GetHeight(FPDF_BITMAP bitmap);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFBitmap_GetStride", SetLastError = true)]
			internal static extern int FPDFBitmap_GetStride(FPDF_BITMAP bitmap);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFBitmap_Destroy", SetLastError = true)]
			internal static extern void FPDFBitmap_Destroy(FPDF_BITMAP bitmap);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_VIEWERREF_GetPrintScaling", SetLastError = true)]
			internal static extern bool FPDF_VIEWERREF_GetPrintScaling(FPDF_DOCUMENT document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_VIEWERREF_GetNumCopies", SetLastError = true)]
			internal static extern int FPDF_VIEWERREF_GetNumCopies(FPDF_DOCUMENT document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_VIEWERREF_GetPrintPageRange", SetLastError = true)]
			internal static extern FPDF_PAGERANGE FPDF_VIEWERREF_GetPrintPageRange(FPDF_DOCUMENT document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_VIEWERREF_GetPrintPageRangeCount", SetLastError = true)]
			internal static extern uint FPDF_VIEWERREF_GetPrintPageRangeCount(FPDF_PAGERANGE pagerange);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_VIEWERREF_GetPrintPageRangeElement", SetLastError = true)]
			internal static extern int FPDF_VIEWERREF_GetPrintPageRangeElement(FPDF_PAGERANGE pagerange, uint index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_VIEWERREF_GetDuplex", SetLastError = true)]
			internal static extern DuplexTypes FPDF_VIEWERREF_GetDuplex(FPDF_DOCUMENT document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_VIEWERREF_GetName", SetLastError = true)]
			internal static extern uint FPDF_VIEWERREF_GetName(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_CountNamedDests", SetLastError = true)]
			internal static extern int FPDF_CountNamedDests(FPDF_DOCUMENT document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetNamedDestByName", SetLastError = true)]
			internal static extern FPDF_DEST FPDF_GetNamedDestByName(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetNamedDest", SetLastError = true)]
			internal static extern FPDF_DEST FPDF_GetNamedDest(FPDF_DOCUMENT document, int index, IntPtr buffer, out int buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetNamedDest", SetLastError = true)]
			internal static extern FPDF_DEST FPDF_GetNamedDest(FPDF_DOCUMENT document, int index, ref byte buffer, ref int buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetRecommendedV8Flags", SetLastError = true)]
			internal static extern string FPDF_GetRecommendedV8Flags();

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFBookmark_GetFirstChild", SetLastError = true)]
			internal static extern FPDF_BOOKMARK FPDFBookmark_GetFirstChild(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFBookmark_GetNextSibling", SetLastError = true)]
			internal static extern FPDF_BOOKMARK FPDFBookmark_GetNextSibling(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFBookmark_GetTitle", SetLastError = true)]
			internal static extern uint FPDFBookmark_GetTitle(FPDF_BOOKMARK bookmark, ref byte buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFBookmark_Find", SetLastError = true)]
			internal static extern FPDF_BOOKMARK FPDFBookmark_Find(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPWStr)] string title);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFBookmark_GetDest", SetLastError = true)]
			internal static extern FPDF_DEST FPDFBookmark_GetDest(FPDF_DOCUMENT document, FPDF_BOOKMARK bookmark);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFBookmark_GetAction", SetLastError = true)]
			internal static extern FPDF_ACTION FPDFBookmark_GetAction(FPDF_BOOKMARK bookmark);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFAction_GetType", SetLastError = true)]
			internal static extern ActionTypes FPDFAction_GetType(FPDF_ACTION action);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFAction_GetDest", SetLastError = true)]
			internal static extern FPDF_DEST FPDFAction_GetDest(FPDF_DOCUMENT document, FPDF_ACTION action);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFAction_GetFilePath", SetLastError = true)]
			internal static extern uint FPDFAction_GetFilePath(FPDF_ACTION action, ref byte buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFAction_GetURIPath", SetLastError = true)]
			internal static extern uint FPDFAction_GetURIPath(FPDF_DOCUMENT document, FPDF_ACTION action, ref byte buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFDest_GetDestPageIndex", SetLastError = true)]
			internal static extern int FPDFDest_GetDestPageIndex(FPDF_DOCUMENT document, FPDF_DEST dest);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFDest_GetView", SetLastError = true)]
			internal static extern ZoomModes FPDFDest_GetView(FPDF_DEST dest, out uint pNumParams, float pParams);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFDest_GetLocationInPage", SetLastError = true)]
			internal static extern bool FPDFDest_GetLocationInPage(FPDF_DEST dest, out bool hasXCoord, out bool hasYCoord, out bool hasZoom, out float x, out float y, out float zoom);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFLink_GetLinkAtPoint", SetLastError = true)]
			internal static extern FPDF_LINK FPDFLink_GetLinkAtPoint(FPDF_PAGE page, double x, double y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFLink_GetLinkZOrderAtPoint", SetLastError = true)]
			internal static extern int FPDFLink_GetLinkZOrderAtPoint(FPDF_PAGE page, double x, double y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFLink_GetDest", SetLastError = true)]
			internal static extern FPDF_DEST FPDFLink_GetDest(FPDF_DOCUMENT document, FPDF_LINK link);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFLink_GetAction", SetLastError = true)]
			internal static extern FPDF_ACTION FPDFLink_GetAction(FPDF_LINK link);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFLink_Enumerate", SetLastError = true)]
			internal static extern bool FPDFLink_Enumerate(FPDF_PAGE page, ref int startPos, out FPDF_LINK linkAnnot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFLink_GetAnnotRect", SetLastError = true)]
			internal static extern bool FPDFLink_GetAnnotRect(FPDF_LINK linkAnnot, out FS_RECTF rect);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFLink_CountQuadPoints", SetLastError = true)]
			internal static extern int FPDFLink_CountQuadPoints(FPDF_LINK linkAnnot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFLink_GetQuadPoints", SetLastError = true)]
			internal static extern bool FPDFLink_GetQuadPoints(FPDF_LINK linkAnnot, int quadIndex, out FS_QUADPOINTSF quadPoints);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetMetaText", SetLastError = true)]
			internal static extern uint FPDF_GetMetaText(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string tag, ref byte buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_GetPageLabel", SetLastError = true)]
			internal static extern uint FPDF_GetPageLabel(FPDF_DOCUMENT document, int page_index, ref byte buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_CreateNewDocument", SetLastError = true)]
			internal static extern FPDF_DOCUMENT FPDF_CreateNewDocument();

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_New", SetLastError = true)]
			internal static extern FPDF_PAGE FPDFPage_New(FPDF_DOCUMENT document, int page_index, double width, double height);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_Delete", SetLastError = true)]
			internal static extern void FPDFPage_Delete(FPDF_DOCUMENT document, int page_index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_GetRotation", SetLastError = true)]
			internal static extern PageOrientations FPDFPage_GetRotation(FPDF_PAGE page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_SetRotation", SetLastError = true)]
			internal static extern void FPDFPage_SetRotation(FPDF_PAGE page, PageOrientations rotation);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_InsertObject", SetLastError = true)]
			internal static extern void FPDFPage_InsertObject(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_RemoveObject", SetLastError = true)]
			internal static extern bool FPDFPage_RemoveObject(FPDF_PAGE page, FPDF_PAGEOBJECT page_obj);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_CountObjects", SetLastError = true)]
			internal static extern int FPDFPage_CountObjects(FPDF_PAGE page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_GetObject", SetLastError = true)]
			internal static extern FPDF_PAGEOBJECT FPDFPage_GetObject(FPDF_PAGE page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_HasTransparency", SetLastError = true)]
			internal static extern bool FPDFPage_HasTransparency(FPDF_PAGE page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_GenerateContent", SetLastError = true)]
			internal static extern bool FPDFPage_GenerateContent(FPDF_PAGE page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_Destroy", SetLastError = true)]
			internal static extern void FPDFPageObj_Destroy(FPDF_PAGEOBJECT page_obj);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_HasTransparency", SetLastError = true)]
			internal static extern bool FPDFPageObj_HasTransparency(FPDF_PAGEOBJECT pageObject);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_GetType", SetLastError = true)]
			internal static extern PageObjTypes FPDFPageObj_GetType(FPDF_PAGEOBJECT page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_Transform", SetLastError = true)]
			internal static extern void FPDFPageObj_Transform(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_TransformAnnots", SetLastError = true)]
			internal static extern void FPDFPage_TransformAnnots(FPDF_PAGE page, double a, double b, double c, double d, double e, double f);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_NewImageObj", SetLastError = true)]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_NewImageObj(FPDF_DOCUMENT document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_CountMarks", SetLastError = true)]
			internal static extern int FPDFPageObj_CountMarks(FPDF_PAGEOBJECT page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_GetMark", SetLastError = true)]
			internal static extern FPDF_PAGEOBJECTMARK FPDFPageObj_GetMark(FPDF_PAGEOBJECT page_object, uint index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_AddMark", SetLastError = true)]
			internal static extern FPDF_PAGEOBJECTMARK FPDFPageObj_AddMark(FPDF_PAGEOBJECT page_object, [MarshalAs(UnmanagedType.LPStr)] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_RemoveMark", SetLastError = true)]
			internal static extern bool FPDFPageObj_RemoveMark(FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObjMark_GetName", SetLastError = true)]
			internal static extern bool FPDFPageObjMark_GetName(FPDF_PAGEOBJECTMARK mark, ref byte buffer, uint buflen, out uint out_buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObjMark_CountParams", SetLastError = true)]
			internal static extern int FPDFPageObjMark_CountParams(FPDF_PAGEOBJECTMARK mark);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObjMark_GetParamKey", SetLastError = true)]
			internal static extern bool FPDFPageObjMark_GetParamKey(FPDF_PAGEOBJECTMARK mark, uint index, ref byte buffer, uint buflen, out uint out_buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObjMark_GetParamValueType", SetLastError = true)]
			internal static extern ObjectTypes FPDFPageObjMark_GetParamValueType(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObjMark_GetParamIntValue", SetLastError = true)]
			internal static extern bool FPDFPageObjMark_GetParamIntValue(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, out int out_value);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObjMark_GetParamStringValue", SetLastError = true)]
			internal static extern bool FPDFPageObjMark_GetParamStringValue(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, uint buflen, out uint out_buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObjMark_GetParamBlobValue", SetLastError = true)]
			internal static extern bool FPDFPageObjMark_GetParamBlobValue(FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte buffer, uint buflen, out uint out_buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObjMark_SetIntParam", SetLastError = true)]
			internal static extern bool FPDFPageObjMark_SetIntParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, int value);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObjMark_SetStringParam", SetLastError = true)]
			internal static extern bool FPDFPageObjMark_SetStringParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, [MarshalAs(UnmanagedType.LPStr)] string value);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObjMark_SetBlobParam", SetLastError = true)]
			internal static extern bool FPDFPageObjMark_SetBlobParam(FPDF_DOCUMENT document, FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key, ref byte value, uint value_len);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObjMark_RemoveParam", SetLastError = true)]
			internal static extern bool FPDFPageObjMark_RemoveParam(FPDF_PAGEOBJECT page_object, FPDF_PAGEOBJECTMARK mark, [MarshalAs(UnmanagedType.LPStr)] string key);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFImageObj_LoadJpegFile", SetLastError = true)]
			internal static extern bool FPDFImageObj_LoadJpegFile(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFImageObj_LoadJpegFileInline", SetLastError = true)]
			internal static extern bool FPDFImageObj_LoadJpegFileInline(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_FILEREAD fileRead);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFImageObj_GetMatrix", SetLastError = true)]
			internal static extern bool FPDFImageObj_GetMatrix(FPDF_PAGEOBJECT image_object, out double a, out double b, out double c, out double d, out double e, out double f);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFImageObj_SetMatrix", SetLastError = true)]
			internal static extern bool FPDFImageObj_SetMatrix(FPDF_PAGEOBJECT image_object, double a, double b, double c, double d, double e, double f);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFImageObj_SetBitmap", SetLastError = true)]
			internal static extern bool FPDFImageObj_SetBitmap(ref FPDF_PAGE pages, int nCount, FPDF_PAGEOBJECT image_object, FPDF_BITMAP bitmap);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFImageObj_GetBitmap", SetLastError = true)]
			internal static extern FPDF_BITMAP FPDFImageObj_GetBitmap(FPDF_PAGEOBJECT image_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFImageObj_GetImageDataDecoded", SetLastError = true)]
			internal static extern uint FPDFImageObj_GetImageDataDecoded(FPDF_PAGEOBJECT image_object, ref byte buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFImageObj_GetImageDataRaw", SetLastError = true)]
			internal static extern uint FPDFImageObj_GetImageDataRaw(FPDF_PAGEOBJECT image_object, ref byte buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFImageObj_GetImageFilterCount", SetLastError = true)]
			internal static extern int FPDFImageObj_GetImageFilterCount(FPDF_PAGEOBJECT image_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFImageObj_GetImageFilter", SetLastError = true)]
			internal static extern uint FPDFImageObj_GetImageFilter(FPDF_PAGEOBJECT image_object, int index, ref byte buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFImageObj_GetImageMetadata", SetLastError = true)]
			internal static extern bool FPDFImageObj_GetImageMetadata(FPDF_PAGEOBJECT image_object, FPDF_PAGE page, out FPDF_IMAGEOBJ_METADATA metadata);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_CreatenewPath", SetLastError = true)]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreatenewPath(float x, float y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_CreatenewRect", SetLastError = true)]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreatenewRect(float x, float y, float w, float h);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_GetBounds", SetLastError = true)]
			internal static extern bool FPDFPageObj_GetBounds(FPDF_PAGEOBJECT page_object, out float left, out float bottom, out float right, out float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_SetBlendMode", SetLastError = true)]
			internal static extern void FPDFPageObj_SetBlendMode(FPDF_PAGEOBJECT page_object, [MarshalAs(UnmanagedType.LPStr)] string blend_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_SetStrokeColor", SetLastError = true)]
			internal static extern bool FPDFPageObj_SetStrokeColor(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_GetStrokeColor", SetLastError = true)]
			internal static extern bool FPDFPageObj_GetStrokeColor(FPDF_PAGEOBJECT page_object, out uint R, out uint G, out uint B, out uint A);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_SetStrokeWidth", SetLastError = true)]
			internal static extern bool FPDFPageObj_SetStrokeWidth(FPDF_PAGEOBJECT page_object, float width);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_GetStrokeWidth", SetLastError = true)]
			internal static extern bool FPDFPageObj_GetStrokeWidth(FPDF_PAGEOBJECT page_object, out float width);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_GetLineJoin", SetLastError = true)]
			internal static extern int FPDFPageObj_GetLineJoin(FPDF_PAGEOBJECT page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_SetLineJoin", SetLastError = true)]
			internal static extern bool FPDFPageObj_SetLineJoin(FPDF_PAGEOBJECT page_object, int line_join);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_GetLineCap", SetLastError = true)]
			internal static extern int FPDFPageObj_GetLineCap(FPDF_PAGEOBJECT page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_SetLineCap", SetLastError = true)]
			internal static extern bool FPDFPageObj_SetLineCap(FPDF_PAGEOBJECT page_object, int line_cap);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_SetFillColor", SetLastError = true)]
			internal static extern bool FPDFPageObj_SetFillColor(FPDF_PAGEOBJECT page_object, uint R, uint G, uint B, uint A);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_GetFillColor", SetLastError = true)]
			internal static extern bool FPDFPageObj_GetFillColor(FPDF_PAGEOBJECT page_object, out uint R, out uint G, out uint B, out uint A);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPath_CountSegments", SetLastError = true)]
			internal static extern int FPDFPath_CountSegments(FPDF_PAGEOBJECT path);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPath_GetPathSegment", SetLastError = true)]
			internal static extern FPDF_PATHSEGMENT FPDFPath_GetPathSegment(FPDF_PAGEOBJECT path, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPathSegment_GetPoint", SetLastError = true)]
			internal static extern bool FPDFPathSegment_GetPoint(FPDF_PATHSEGMENT segment, out float x, out float y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPathSegment_GetType", SetLastError = true)]
			internal static extern int FPDFPathSegment_GetType(FPDF_PATHSEGMENT segment);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPathSegment_GetClose", SetLastError = true)]
			internal static extern bool FPDFPathSegment_GetClose(FPDF_PATHSEGMENT segment);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPath_MoveTo", SetLastError = true)]
			internal static extern bool FPDFPath_MoveTo(FPDF_PAGEOBJECT path, float x, float y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPath_LineTo", SetLastError = true)]
			internal static extern bool FPDFPath_LineTo(FPDF_PAGEOBJECT path, float x, float y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPath_BezierTo", SetLastError = true)]
			internal static extern bool FPDFPath_BezierTo(FPDF_PAGEOBJECT path, float x1, float y1, float x2, float y2, float x3, float y3);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPath_Close", SetLastError = true)]
			internal static extern bool FPDFPath_Close(FPDF_PAGEOBJECT path);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPath_SetDrawMode", SetLastError = true)]
			internal static extern bool FPDFPath_SetDrawMode(FPDF_PAGEOBJECT path, PathFillModes fillmode, bool stroke);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPath_GetDrawMode", SetLastError = true)]
			internal static extern bool FPDFPath_GetDrawMode(FPDF_PAGEOBJECT path, out PathFillModes fillmode, out bool stroke);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPath_GetMatrix", SetLastError = true)]
			internal static extern bool FPDFPath_GetMatrix(FPDF_PAGEOBJECT path, FS_MATRIX matrix);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPath_SetMatrix", SetLastError = true)]
			internal static extern bool FPDFPath_SetMatrix(FPDF_PAGEOBJECT path, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_NewTextObj", SetLastError = true)]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_NewTextObj(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font, float font_size);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_SetText", SetLastError = true)]
			internal static extern bool FPDFText_SetText(FPDF_PAGEOBJECT text_object, [MarshalAs(UnmanagedType.LPWStr)] string text);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_LoadFont", SetLastError = true)]
			internal static extern FPDF_FONT FPDFText_LoadFont(FPDF_DOCUMENT document, ref byte data, uint size, FontTypes font_type, bool cid);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_LoadStandardFont", SetLastError = true)]
			internal static extern FPDF_FONT FPDFText_LoadStandardFont(FPDF_DOCUMENT document, [MarshalAs(UnmanagedType.LPStr)] string font);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFTextObj_GetMatrix", SetLastError = true)]
			internal static extern bool FPDFTextObj_GetMatrix(FPDF_PAGEOBJECT text, FS_MATRIX matrix);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFTextObj_GetFontSize", SetLastError = true)]
			internal static extern float FPDFTextObj_GetFontSize(FPDF_PAGEOBJECT text);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFFont_Close", SetLastError = true)]
			internal static extern void FPDFFont_Close(FPDF_FONT font);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_CreateTextObj", SetLastError = true)]
			internal static extern FPDF_PAGEOBJECT FPDFPageObj_CreateTextObj(FPDF_DOCUMENT document, FPDF_FONT font, float font_size);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFTextObj_GetTextRenderMode", SetLastError = true)]
			internal static extern FPDF_TEXT_RENDERMODE FPDFTextObj_GetTextRenderMode(FPDF_PAGEOBJECT text);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFTextObj_SetTextRenderMode", SetLastError = true)]
			internal static extern bool FPDFTextObj_SetTextRenderMode(FPDF_PAGEOBJECT text, FPDF_TEXT_RENDERMODE render_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFTextObj_GetFontName", SetLastError = true)]
			internal static extern uint FPDFTextObj_GetFontName(FPDF_PAGEOBJECT text, ref byte buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFTextObj_GetText", SetLastError = true)]
			internal static extern uint FPDFTextObj_GetText(FPDF_PAGEOBJECT text_object, FPDF_TEXTPAGE text_page, ref byte buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFFormObj_CountObjects", SetLastError = true)]
			internal static extern int FPDFFormObj_CountObjects(FPDF_PAGEOBJECT form_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFFormObj_GetObject", SetLastError = true)]
			internal static extern FPDF_PAGEOBJECT FPDFFormObj_GetObject(FPDF_PAGEOBJECT form_object, uint index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFFormObj_GetMatrix", SetLastError = true)]
			internal static extern bool FPDFFormObj_GetMatrix(FPDF_PAGEOBJECT form_object, FS_MATRIX matrix);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFDoc_GetPageMode", SetLastError = true)]
			internal static extern PageModes FPDFDoc_GetPageMode(FPDF_DOCUMENT document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_Flatten", SetLastError = true)]
			internal static extern FlattenResults FPDFPage_Flatten(FPDF_PAGE page, FlattenFlags nFlag);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_ImportPages", SetLastError = true)]
			internal static extern bool FPDF_ImportPages(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc, [MarshalAs(UnmanagedType.LPStr)] string pagerange, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_ImportNPagesToOne", SetLastError = true)]
			internal static extern FPDF_DOCUMENT FPDF_ImportNPagesToOne(FPDF_DOCUMENT src_doc, float output_width, float output_height, int num_pages_on_x_axis, int num_pages_on_y_axis);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_CopyViewerPreferences", SetLastError = true)]
			internal static extern bool FPDF_CopyViewerPreferences(FPDF_DOCUMENT dest_doc, FPDF_DOCUMENT src_doc);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_RenderPageBitmap_Start", SetLastError = true)]
			internal static extern RenderingStatus FPDF_RenderPageBitmap_Start(FPDF_BITMAP bitmap, FPDF_PAGE page, int start_x, int start_y, int size_x, int size_y, PageOrientations rotate, RenderingFlags flags, IFSDK_PAUSE pause);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_RenderPage_Continue", SetLastError = true)]
			internal static extern RenderingStatus FPDF_RenderPage_Continue(FPDF_PAGE page, IFSDK_PAUSE pause);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_RenderPage_Close", SetLastError = true)]
			internal static extern void FPDF_RenderPage_Close(FPDF_PAGE page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_SaveAsCopy", SetLastError = true)]
			internal static extern bool FPDF_SaveAsCopy(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_SaveWithVersion", SetLastError = true)]
			internal static extern bool FPDF_SaveWithVersion(FPDF_DOCUMENT document, FPDF_FILEWRITE fileWrite, SaveFlags flags, int fileVersion);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetCharIndexFromTextIndex", SetLastError = true)]
			internal static extern int FPDFText_GetCharIndexFromTextIndex(FPDF_TEXTPAGE text_page, int nTextIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetTextIndexFromCharIndex", SetLastError = true)]
			internal static extern int FPDFText_GetTextIndexFromCharIndex(FPDF_TEXTPAGE text_page, int nCharIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_StructTree_GetForPage", SetLastError = true)]
			internal static extern FPDF_STRUCTTREE FPDF_StructTree_GetForPage(FPDF_PAGE page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_StructTree_Close", SetLastError = true)]
			internal static extern void FPDF_StructTree_Close(FPDF_STRUCTTREE struct_tree);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_StructTree_CountChildren", SetLastError = true)]
			internal static extern int FPDF_StructTree_CountChildren(FPDF_STRUCTTREE struct_tree);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_StructTree_GetChildAtIndex", SetLastError = true)]
			internal static extern FPDF_STRUCTELEMENT FPDF_StructTree_GetChildAtIndex(FPDF_STRUCTTREE struct_tree, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_StructElement_GetAltText", SetLastError = true)]
			internal static extern uint FPDF_StructElement_GetAltText(FPDF_STRUCTELEMENT struct_element, ref byte buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_StructElement_GetMarkedContentID", SetLastError = true)]
			internal static extern int FPDF_StructElement_GetMarkedContentID(FPDF_STRUCTELEMENT struct_element);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_StructElement_GetType", SetLastError = true)]
			internal static extern uint FPDF_StructElement_GetType(FPDF_STRUCTELEMENT struct_element, ref byte buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_StructElement_GetTitle", SetLastError = true)]
			internal static extern uint FPDF_StructElement_GetTitle(FPDF_STRUCTELEMENT struct_element, ref byte buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_StructElement_CountChildren", SetLastError = true)]
			internal static extern int FPDF_StructElement_CountChildren(FPDF_STRUCTELEMENT struct_element);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_StructElement_GetChildAtIndex", SetLastError = true)]
			internal static extern FPDF_STRUCTELEMENT FPDF_StructElement_GetChildAtIndex(FPDF_STRUCTELEMENT struct_element, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_LoadPage", SetLastError = true)]
			internal static extern FPDF_TEXTPAGE FPDFText_LoadPage(FPDF_PAGE page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_ClosePage", SetLastError = true)]
			internal static extern void FPDFText_ClosePage(FPDF_TEXTPAGE text_page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_CountChars", SetLastError = true)]
			internal static extern int FPDFText_CountChars(FPDF_TEXTPAGE text_page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetUnicode", SetLastError = true)]
			[return: MarshalAs(UnmanagedType.U4)]
			internal static extern char FPDFText_GetUnicode(FPDF_TEXTPAGE text_page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetFontSize", SetLastError = true)]
			internal static extern double FPDFText_GetFontSize(FPDF_TEXTPAGE text_page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetFontInfo", SetLastError = true)]
			internal static extern uint FPDFText_GetFontInfo(FPDF_TEXTPAGE text_page, int index, ref byte buffer, uint buflen, out int flags);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetFontWeight", SetLastError = true)]
			internal static extern int FPDFText_GetFontWeight(FPDF_TEXTPAGE text_page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetTextRenderMode", SetLastError = true)]
			internal static extern FPDF_TEXT_RENDERMODE FPDFText_GetTextRenderMode(FPDF_TEXTPAGE text_page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetFillColor", SetLastError = true)]
			internal static extern bool FPDFText_GetFillColor(FPDF_TEXTPAGE text_page, int index, out uint R, out uint G, out uint B, out uint A);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetStrokeColor", SetLastError = true)]
			internal static extern bool FPDFText_GetStrokeColor(FPDF_TEXTPAGE text_page, int index, out uint R, out uint G, out uint B, out uint A);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetCharAngle", SetLastError = true)]
			internal static extern float FPDFText_GetCharAngle(FPDF_TEXTPAGE text_page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetCharBox", SetLastError = true)]
			internal static extern bool FPDFText_GetCharBox(FPDF_TEXTPAGE text_page, int index, out double left, out double right, out double bottom, out double top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetLooseCharBox", SetLastError = true)]
			internal static extern bool FPDFText_GetLooseCharBox(FPDF_TEXTPAGE text_page, int index, FS_RECTF rect);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetMatrix", SetLastError = true)]
			internal static extern bool FPDFText_GetMatrix(FPDF_TEXTPAGE text_page, int index, FS_MATRIX matrix);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetCharOrigin", SetLastError = true)]
			internal static extern bool FPDFText_GetCharOrigin(FPDF_TEXTPAGE text_page, int index, out double x, out double y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetCharIndexAtPos", SetLastError = true)]
			internal static extern int FPDFText_GetCharIndexAtPos(FPDF_TEXTPAGE text_page, double x, double y, double xTolerance, double yTolerance);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetText", SetLastError = true)]
			internal static extern int FPDFText_GetText(FPDF_TEXTPAGE text_page, int start_index, int count, ref byte result);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_CountRects", SetLastError = true)]
			internal static extern int FPDFText_CountRects(FPDF_TEXTPAGE text_page, int start_index, int count);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetRect", SetLastError = true)]
			internal static extern bool FPDFText_GetRect(FPDF_TEXTPAGE text_page, int rect_index, out double left, out double top, out double right, out double bottom);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetBoundedText", SetLastError = true)]
			internal static extern int FPDFText_GetBoundedText(FPDF_TEXTPAGE text_page, double left, double top, double right, double bottom, ref byte buffer, int buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_FindStart", SetLastError = true)]
			internal static extern FPDF_SCHHANDLE FPDFText_FindStart(FPDF_TEXTPAGE text_page, [MarshalAs(UnmanagedType.LPWStr)] string findwhat, SearchFlags flags, int start_index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_FindNext", SetLastError = true)]
			internal static extern bool FPDFText_FindNext(FPDF_SCHHANDLE handle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_FindPrev", SetLastError = true)]
			internal static extern bool FPDFText_FindPrev(FPDF_SCHHANDLE handle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetSchResultIndex", SetLastError = true)]
			internal static extern int FPDFText_GetSchResultIndex(FPDF_SCHHANDLE handle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_GetSchCount", SetLastError = true)]
			internal static extern int FPDFText_GetSchCount(FPDF_SCHHANDLE handle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFText_FindClose", SetLastError = true)]
			internal static extern void FPDFText_FindClose(FPDF_SCHHANDLE handle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFLink_LoadWebLinks", SetLastError = true)]
			internal static extern FPDF_PAGELINK FPDFLink_LoadWebLinks(FPDF_TEXTPAGE text_page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFLink_CountWebLinks", SetLastError = true)]
			internal static extern int FPDFLink_CountWebLinks(FPDF_PAGELINK link_page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFLink_GetURL", SetLastError = true)]
			internal static extern int FPDFLink_GetURL(FPDF_PAGELINK link_page, int link_index, ref byte buffer, int buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFLink_CountRects", SetLastError = true)]
			internal static extern int FPDFLink_CountRects(FPDF_PAGELINK link_page, int link_index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFLink_GetRect", SetLastError = true)]
			internal static extern bool FPDFLink_GetRect(FPDF_PAGELINK link_page, int link_index, int rect_index, out double left, out double top, out double right, out double bottom);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFLink_GetTextRange", SetLastError = true)]
			internal static extern bool FPDFLink_GetTextRange(FPDF_PAGELINK link_page, int link_index, out int start_char_index, out int char_count);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFLink_CloseWebLinks", SetLastError = true)]
			internal static extern void FPDFLink_CloseWebLinks(FPDF_PAGELINK link_page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_SetMediaBox", SetLastError = true)]
			internal static extern void FPDFPage_SetMediaBox(FPDF_PAGE page, float left, float bottom, float right, float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_SetCropBox", SetLastError = true)]
			internal static extern void FPDFPage_SetCropBox(FPDF_PAGE page, float left, float bottom, float right, float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_SetBleedBox", SetLastError = true)]
			internal static extern void FPDFPage_SetBleedBox(FPDF_PAGE page, float left, float bottom, float right, float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_SetTrimBox", SetLastError = true)]
			internal static extern void FPDFPage_SetTrimBox(FPDF_PAGE page, float left, float bottom, float right, float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_SetArtBox", SetLastError = true)]
			internal static extern void FPDFPage_SetArtBox(FPDF_PAGE page, float left, float bottom, float right, float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_GetMediaBox", SetLastError = true)]
			internal static extern bool FPDFPage_GetMediaBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_GetCropBox", SetLastError = true)]
			internal static extern bool FPDFPage_GetCropBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_GetBleedBox", SetLastError = true)]
			internal static extern bool FPDFPage_GetBleedBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_GetTrimBox", SetLastError = true)]
			internal static extern bool FPDFPage_GetTrimBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_GetArtBox", SetLastError = true)]
			internal static extern bool FPDFPage_GetArtBox(FPDF_PAGE page, out float left, out float bottom, out float right, out float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_TransFormWithClip", SetLastError = true)]
			internal static extern bool FPDFPage_TransFormWithClip(FPDF_PAGE page, [MarshalAs(UnmanagedType.LPStruct)] FS_MATRIX matrix, [MarshalAs(UnmanagedType.LPStruct)] FS_RECTF clipRect);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_TransformClipPath", SetLastError = true)]
			internal static extern void FPDFPageObj_TransformClipPath(FPDF_PAGEOBJECT page_object, double a, double b, double c, double d, double e, double f);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPageObj_GetClipPath", SetLastError = true)]
			internal static extern FPDF_CLIPPATH FPDFPageObj_GetClipPath(FPDF_PAGEOBJECT page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFClipPath_CountPaths", SetLastError = true)]
			internal static extern int FPDFClipPath_CountPaths(FPDF_CLIPPATH clip_path);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFClipPath_CountPathSegments", SetLastError = true)]
			internal static extern int FPDFClipPath_CountPathSegments(FPDF_CLIPPATH clip_path, int path_index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFClipPath_GetPathSegment", SetLastError = true)]
			internal static extern FPDF_PATHSEGMENT FPDFClipPath_GetPathSegment(FPDF_CLIPPATH clip_path, int path_index, int segment_index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_CreateClipPath", SetLastError = true)]
			internal static extern FPDF_CLIPPATH FPDF_CreateClipPath(float left, float bottom, float right, float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDF_DestroyClipPath", SetLastError = true)]
			internal static extern void FPDF_DestroyClipPath(FPDF_CLIPPATH clipPath);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "FPDFPage_InsertClipPath", SetLastError = true)]
			internal static extern void FPDFPage_InsertClipPath(FPDF_PAGE page, FPDF_CLIPPATH clipPath);

        }

        #endregion
	}
}