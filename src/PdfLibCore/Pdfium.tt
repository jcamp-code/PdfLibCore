<# /*
This file is part of PdfCoreLib, a wrapper around the PDFium library for the .NET.
Inspired by the awesome work of PDFiumSharp by Tobias Meyer.

Copyright (C) 2021 Jan Baarsssen
License: Microsoft Reciprocal License (MS-RL)
*/ #>
<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ include file="common.ttinclude" #> 
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".g.cs" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Runtime.InteropServices;
using System.Runtime.ExceptionServices;
using System.Security;
using PdfLibCore.Types;
using PdfLibCore.Enums;

/*
This file is part of PdfCoreLib, a wrapper around the PDFium library for the .NET.
Inspired by the awesome work of PDFiumSharp by Tobias Meyer.

Copyright (C) 2021 Jan Baarsssen
License: Microsoft Reciprocal License (MS-RL)
*/

// AUTOGENERATED FILE - <#=DateTime.Now.ToString("dd-MM-yyyy (HH:MM:ss)")#>
// DO NOT MODIFY

namespace PdfLibCore
{
    public static partial class Pdfium
	{
        private static readonly object _lock = new object();

<# // ------------------------------------------------------ Code Start ------------------------------------------------------
foreach (var import in _imports.Where(i => !string.IsNullOrEmpty(i.Method)))
{ // --------------------------------------------------------- Code End ----------------------------------------------------- #>
		#region <#=import.Name#>

		/// <include file="Pdfium.xml" path="Documentation/<#=import.Name#>/*" /><#=import.Documentation.Aggregate(string.Empty, (current, doc) => current + Environment.NewLine + "\t\t/// " + doc)#>
        [HandleProcessCorruptedStateExceptions]
		<#=import.AccessModifier#> static <#=import.ReturnType#> <#=import.Name#><#=import.ArgumentList#>
		{
            lock(_lock) 
            {
                try
                {
                    <#=(import.ReturnType == "void" ? string.Empty : "return ")#>PlatformInvoke.<#=import.Name#>(<#=import.Arguments#>);
                }
                catch(AccessViolationException innerException)
                {
                    throw new PdfiumException(innerException);
                }
		    }
        }

		#endregion <#=import.Name#>

<# // ------------------------------------------------------ Code Start ------------------------------------------------------
} // --------------------------------------------------------- Code End ----------------------------------------------------- #>
  
        #region PlatformInvoke
              
        private static class PlatformInvoke
        {
<#foreach (var import in _imports.Where(i => !string.IsNullOrEmpty(i.Method)))
{#>
            [SuppressUnmanagedCodeSecurity, DllImport("<#=DllName#>", EntryPoint = "<#=import.Name#>", SetLastError = true)]<#=import.Attributes.Aggregate(string.Empty, (current, attr) => current + Environment.NewLine + "\t\t\t" + attr)#>
			internal static extern <#=import.ReturnType#> <#=import.Name#><#=import.ArgumentList#>;

<#}#>
        }

        #endregion
	}
}